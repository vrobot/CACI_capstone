
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000765c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007844  08007844  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800784c  0800784c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c88  20000028  0800787c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002cb0  0800787c  00022cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e5b  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026af  00000000  00000000  00033eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00036568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00037720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ffc  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e6  00000000  00000000  0005b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6064  00000000  00000000  0006f9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  00145aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800780c 	.word	0x0800780c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000002c 	.word	0x2000002c
 8000204:	0800780c 	.word	0x0800780c

08000208 <__aeabi_frsub>:
 8000208:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__addsf3>
 800020e:	bf00      	nop

08000210 <__aeabi_fsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000214 <__addsf3>:
 8000214:	0042      	lsls	r2, r0, #1
 8000216:	bf1f      	itttt	ne
 8000218:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800021c:	ea92 0f03 	teqne	r2, r3
 8000220:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000224:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000228:	d06a      	beq.n	8000300 <__addsf3+0xec>
 800022a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000232:	bfc1      	itttt	gt
 8000234:	18d2      	addgt	r2, r2, r3
 8000236:	4041      	eorgt	r1, r0
 8000238:	4048      	eorgt	r0, r1
 800023a:	4041      	eorgt	r1, r0
 800023c:	bfb8      	it	lt
 800023e:	425b      	neglt	r3, r3
 8000240:	2b19      	cmp	r3, #25
 8000242:	bf88      	it	hi
 8000244:	4770      	bxhi	lr
 8000246:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800024a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800024e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000252:	bf18      	it	ne
 8000254:	4240      	negne	r0, r0
 8000256:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800025e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000262:	bf18      	it	ne
 8000264:	4249      	negne	r1, r1
 8000266:	ea92 0f03 	teq	r2, r3
 800026a:	d03f      	beq.n	80002ec <__addsf3+0xd8>
 800026c:	f1a2 0201 	sub.w	r2, r2, #1
 8000270:	fa41 fc03 	asr.w	ip, r1, r3
 8000274:	eb10 000c 	adds.w	r0, r0, ip
 8000278:	f1c3 0320 	rsb	r3, r3, #32
 800027c:	fa01 f103 	lsl.w	r1, r1, r3
 8000280:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000284:	d502      	bpl.n	800028c <__addsf3+0x78>
 8000286:	4249      	negs	r1, r1
 8000288:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800028c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000290:	d313      	bcc.n	80002ba <__addsf3+0xa6>
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d306      	bcc.n	80002a6 <__addsf3+0x92>
 8000298:	0840      	lsrs	r0, r0, #1
 800029a:	ea4f 0131 	mov.w	r1, r1, rrx
 800029e:	f102 0201 	add.w	r2, r2, #1
 80002a2:	2afe      	cmp	r2, #254	; 0xfe
 80002a4:	d251      	bcs.n	800034a <__addsf3+0x136>
 80002a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ae:	bf08      	it	eq
 80002b0:	f020 0001 	biceq.w	r0, r0, #1
 80002b4:	ea40 0003 	orr.w	r0, r0, r3
 80002b8:	4770      	bx	lr
 80002ba:	0049      	lsls	r1, r1, #1
 80002bc:	eb40 0000 	adc.w	r0, r0, r0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c8:	d2ed      	bcs.n	80002a6 <__addsf3+0x92>
 80002ca:	fab0 fc80 	clz	ip, r0
 80002ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80002d2:	ebb2 020c 	subs.w	r2, r2, ip
 80002d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002da:	bfaa      	itet	ge
 80002dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e0:	4252      	neglt	r2, r2
 80002e2:	4318      	orrge	r0, r3
 80002e4:	bfbc      	itt	lt
 80002e6:	40d0      	lsrlt	r0, r2
 80002e8:	4318      	orrlt	r0, r3
 80002ea:	4770      	bx	lr
 80002ec:	f092 0f00 	teq	r2, #0
 80002f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f4:	bf06      	itte	eq
 80002f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002fa:	3201      	addeq	r2, #1
 80002fc:	3b01      	subne	r3, #1
 80002fe:	e7b5      	b.n	800026c <__addsf3+0x58>
 8000300:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000304:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000308:	bf18      	it	ne
 800030a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030e:	d021      	beq.n	8000354 <__addsf3+0x140>
 8000310:	ea92 0f03 	teq	r2, r3
 8000314:	d004      	beq.n	8000320 <__addsf3+0x10c>
 8000316:	f092 0f00 	teq	r2, #0
 800031a:	bf08      	it	eq
 800031c:	4608      	moveq	r0, r1
 800031e:	4770      	bx	lr
 8000320:	ea90 0f01 	teq	r0, r1
 8000324:	bf1c      	itt	ne
 8000326:	2000      	movne	r0, #0
 8000328:	4770      	bxne	lr
 800032a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800032e:	d104      	bne.n	800033a <__addsf3+0x126>
 8000330:	0040      	lsls	r0, r0, #1
 8000332:	bf28      	it	cs
 8000334:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000338:	4770      	bx	lr
 800033a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800033e:	bf3c      	itt	cc
 8000340:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000344:	4770      	bxcc	lr
 8000346:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800034a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800034e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000352:	4770      	bx	lr
 8000354:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000358:	bf16      	itet	ne
 800035a:	4608      	movne	r0, r1
 800035c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000360:	4601      	movne	r1, r0
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	bf06      	itte	eq
 8000366:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800036a:	ea90 0f01 	teqeq	r0, r1
 800036e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000372:	4770      	bx	lr

08000374 <__aeabi_ui2f>:
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	e004      	b.n	8000384 <__aeabi_i2f+0x8>
 800037a:	bf00      	nop

0800037c <__aeabi_i2f>:
 800037c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000380:	bf48      	it	mi
 8000382:	4240      	negmi	r0, r0
 8000384:	ea5f 0c00 	movs.w	ip, r0
 8000388:	bf08      	it	eq
 800038a:	4770      	bxeq	lr
 800038c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000390:	4601      	mov	r1, r0
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	e01c      	b.n	80003d2 <__aeabi_l2f+0x2a>

08000398 <__aeabi_ul2f>:
 8000398:	ea50 0201 	orrs.w	r2, r0, r1
 800039c:	bf08      	it	eq
 800039e:	4770      	bxeq	lr
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e00a      	b.n	80003bc <__aeabi_l2f+0x14>
 80003a6:	bf00      	nop

080003a8 <__aeabi_l2f>:
 80003a8:	ea50 0201 	orrs.w	r2, r0, r1
 80003ac:	bf08      	it	eq
 80003ae:	4770      	bxeq	lr
 80003b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b4:	d502      	bpl.n	80003bc <__aeabi_l2f+0x14>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	ea5f 0c01 	movs.w	ip, r1
 80003c0:	bf02      	ittt	eq
 80003c2:	4684      	moveq	ip, r0
 80003c4:	4601      	moveq	r1, r0
 80003c6:	2000      	moveq	r0, #0
 80003c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003cc:	bf08      	it	eq
 80003ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003d6:	fabc f28c 	clz	r2, ip
 80003da:	3a08      	subs	r2, #8
 80003dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e0:	db10      	blt.n	8000404 <__aeabi_l2f+0x5c>
 80003e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e6:	4463      	add	r3, ip
 80003e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ec:	f1c2 0220 	rsb	r2, r2, #32
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	fa20 f202 	lsr.w	r2, r0, r2
 80003f8:	eb43 0002 	adc.w	r0, r3, r2
 80003fc:	bf08      	it	eq
 80003fe:	f020 0001 	biceq.w	r0, r0, #1
 8000402:	4770      	bx	lr
 8000404:	f102 0220 	add.w	r2, r2, #32
 8000408:	fa01 fc02 	lsl.w	ip, r1, r2
 800040c:	f1c2 0220 	rsb	r2, r2, #32
 8000410:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000414:	fa21 f202 	lsr.w	r2, r1, r2
 8000418:	eb43 0002 	adc.w	r0, r3, r2
 800041c:	bf08      	it	eq
 800041e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000422:	4770      	bx	lr

08000424 <__aeabi_uldivmod>:
 8000424:	b953      	cbnz	r3, 800043c <__aeabi_uldivmod+0x18>
 8000426:	b94a      	cbnz	r2, 800043c <__aeabi_uldivmod+0x18>
 8000428:	2900      	cmp	r1, #0
 800042a:	bf08      	it	eq
 800042c:	2800      	cmpeq	r0, #0
 800042e:	bf1c      	itt	ne
 8000430:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000434:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000438:	f000 b974 	b.w	8000724 <__aeabi_idiv0>
 800043c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000440:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	f8dd e004 	ldr.w	lr, [sp, #4]
 800044c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr

08000454 <__udivmoddi4>:
 8000454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000458:	9d08      	ldr	r5, [sp, #32]
 800045a:	4604      	mov	r4, r0
 800045c:	468e      	mov	lr, r1
 800045e:	2b00      	cmp	r3, #0
 8000460:	d14d      	bne.n	80004fe <__udivmoddi4+0xaa>
 8000462:	428a      	cmp	r2, r1
 8000464:	4694      	mov	ip, r2
 8000466:	d969      	bls.n	800053c <__udivmoddi4+0xe8>
 8000468:	fab2 f282 	clz	r2, r2
 800046c:	b152      	cbz	r2, 8000484 <__udivmoddi4+0x30>
 800046e:	fa01 f302 	lsl.w	r3, r1, r2
 8000472:	f1c2 0120 	rsb	r1, r2, #32
 8000476:	fa20 f101 	lsr.w	r1, r0, r1
 800047a:	fa0c fc02 	lsl.w	ip, ip, r2
 800047e:	ea41 0e03 	orr.w	lr, r1, r3
 8000482:	4094      	lsls	r4, r2
 8000484:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000488:	0c21      	lsrs	r1, r4, #16
 800048a:	fbbe f6f8 	udiv	r6, lr, r8
 800048e:	fa1f f78c 	uxth.w	r7, ip
 8000492:	fb08 e316 	mls	r3, r8, r6, lr
 8000496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800049a:	fb06 f107 	mul.w	r1, r6, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d90a      	bls.n	80004b8 <__udivmoddi4+0x64>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004aa:	f080 811f 	bcs.w	80006ec <__udivmoddi4+0x298>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 811c 	bls.w	80006ec <__udivmoddi4+0x298>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c8:	fb00 f707 	mul.w	r7, r0, r7
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x92>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	f080 810a 	bcs.w	80006f0 <__udivmoddi4+0x29c>
 80004dc:	42a7      	cmp	r7, r4
 80004de:	f240 8107 	bls.w	80006f0 <__udivmoddi4+0x29c>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ea:	1be4      	subs	r4, r4, r7
 80004ec:	2600      	movs	r6, #0
 80004ee:	b11d      	cbz	r5, 80004f8 <__udivmoddi4+0xa4>
 80004f0:	40d4      	lsrs	r4, r2
 80004f2:	2300      	movs	r3, #0
 80004f4:	e9c5 4300 	strd	r4, r3, [r5]
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	428b      	cmp	r3, r1
 8000500:	d909      	bls.n	8000516 <__udivmoddi4+0xc2>
 8000502:	2d00      	cmp	r5, #0
 8000504:	f000 80ef 	beq.w	80006e6 <__udivmoddi4+0x292>
 8000508:	2600      	movs	r6, #0
 800050a:	e9c5 0100 	strd	r0, r1, [r5]
 800050e:	4630      	mov	r0, r6
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	fab3 f683 	clz	r6, r3
 800051a:	2e00      	cmp	r6, #0
 800051c:	d14a      	bne.n	80005b4 <__udivmoddi4+0x160>
 800051e:	428b      	cmp	r3, r1
 8000520:	d302      	bcc.n	8000528 <__udivmoddi4+0xd4>
 8000522:	4282      	cmp	r2, r0
 8000524:	f200 80f9 	bhi.w	800071a <__udivmoddi4+0x2c6>
 8000528:	1a84      	subs	r4, r0, r2
 800052a:	eb61 0303 	sbc.w	r3, r1, r3
 800052e:	2001      	movs	r0, #1
 8000530:	469e      	mov	lr, r3
 8000532:	2d00      	cmp	r5, #0
 8000534:	d0e0      	beq.n	80004f8 <__udivmoddi4+0xa4>
 8000536:	e9c5 4e00 	strd	r4, lr, [r5]
 800053a:	e7dd      	b.n	80004f8 <__udivmoddi4+0xa4>
 800053c:	b902      	cbnz	r2, 8000540 <__udivmoddi4+0xec>
 800053e:	deff      	udf	#255	; 0xff
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	2a00      	cmp	r2, #0
 8000546:	f040 8092 	bne.w	800066e <__udivmoddi4+0x21a>
 800054a:	eba1 010c 	sub.w	r1, r1, ip
 800054e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000552:	fa1f fe8c 	uxth.w	lr, ip
 8000556:	2601      	movs	r6, #1
 8000558:	0c20      	lsrs	r0, r4, #16
 800055a:	fbb1 f3f7 	udiv	r3, r1, r7
 800055e:	fb07 1113 	mls	r1, r7, r3, r1
 8000562:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000566:	fb0e f003 	mul.w	r0, lr, r3
 800056a:	4288      	cmp	r0, r1
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x12c>
 800056e:	eb1c 0101 	adds.w	r1, ip, r1
 8000572:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000576:	d202      	bcs.n	800057e <__udivmoddi4+0x12a>
 8000578:	4288      	cmp	r0, r1
 800057a:	f200 80cb 	bhi.w	8000714 <__udivmoddi4+0x2c0>
 800057e:	4643      	mov	r3, r8
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb1 f0f7 	udiv	r0, r1, r7
 8000588:	fb07 1110 	mls	r1, r7, r0, r1
 800058c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000590:	fb0e fe00 	mul.w	lr, lr, r0
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x156>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a0:	d202      	bcs.n	80005a8 <__udivmoddi4+0x154>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	f200 80bb 	bhi.w	800071e <__udivmoddi4+0x2ca>
 80005a8:	4608      	mov	r0, r1
 80005aa:	eba4 040e 	sub.w	r4, r4, lr
 80005ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005b2:	e79c      	b.n	80004ee <__udivmoddi4+0x9a>
 80005b4:	f1c6 0720 	rsb	r7, r6, #32
 80005b8:	40b3      	lsls	r3, r6
 80005ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80005be:	ea4c 0c03 	orr.w	ip, ip, r3
 80005c2:	fa20 f407 	lsr.w	r4, r0, r7
 80005c6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ca:	431c      	orrs	r4, r3
 80005cc:	40f9      	lsrs	r1, r7
 80005ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005d2:	fa00 f306 	lsl.w	r3, r0, r6
 80005d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005da:	0c20      	lsrs	r0, r4, #16
 80005dc:	fa1f fe8c 	uxth.w	lr, ip
 80005e0:	fb09 1118 	mls	r1, r9, r8, r1
 80005e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005e8:	fb08 f00e 	mul.w	r0, r8, lr
 80005ec:	4288      	cmp	r0, r1
 80005ee:	fa02 f206 	lsl.w	r2, r2, r6
 80005f2:	d90b      	bls.n	800060c <__udivmoddi4+0x1b8>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005fc:	f080 8088 	bcs.w	8000710 <__udivmoddi4+0x2bc>
 8000600:	4288      	cmp	r0, r1
 8000602:	f240 8085 	bls.w	8000710 <__udivmoddi4+0x2bc>
 8000606:	f1a8 0802 	sub.w	r8, r8, #2
 800060a:	4461      	add	r1, ip
 800060c:	1a09      	subs	r1, r1, r0
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb1 f0f9 	udiv	r0, r1, r9
 8000614:	fb09 1110 	mls	r1, r9, r0, r1
 8000618:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800061c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000620:	458e      	cmp	lr, r1
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x1e2>
 8000624:	eb1c 0101 	adds.w	r1, ip, r1
 8000628:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800062c:	d26c      	bcs.n	8000708 <__udivmoddi4+0x2b4>
 800062e:	458e      	cmp	lr, r1
 8000630:	d96a      	bls.n	8000708 <__udivmoddi4+0x2b4>
 8000632:	3802      	subs	r0, #2
 8000634:	4461      	add	r1, ip
 8000636:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800063a:	fba0 9402 	umull	r9, r4, r0, r2
 800063e:	eba1 010e 	sub.w	r1, r1, lr
 8000642:	42a1      	cmp	r1, r4
 8000644:	46c8      	mov	r8, r9
 8000646:	46a6      	mov	lr, r4
 8000648:	d356      	bcc.n	80006f8 <__udivmoddi4+0x2a4>
 800064a:	d053      	beq.n	80006f4 <__udivmoddi4+0x2a0>
 800064c:	b15d      	cbz	r5, 8000666 <__udivmoddi4+0x212>
 800064e:	ebb3 0208 	subs.w	r2, r3, r8
 8000652:	eb61 010e 	sbc.w	r1, r1, lr
 8000656:	fa01 f707 	lsl.w	r7, r1, r7
 800065a:	fa22 f306 	lsr.w	r3, r2, r6
 800065e:	40f1      	lsrs	r1, r6
 8000660:	431f      	orrs	r7, r3
 8000662:	e9c5 7100 	strd	r7, r1, [r5]
 8000666:	2600      	movs	r6, #0
 8000668:	4631      	mov	r1, r6
 800066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066e:	f1c2 0320 	rsb	r3, r2, #32
 8000672:	40d8      	lsrs	r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	fa21 f303 	lsr.w	r3, r1, r3
 800067c:	4091      	lsls	r1, r2
 800067e:	4301      	orrs	r1, r0
 8000680:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	fbb3 f0f7 	udiv	r0, r3, r7
 800068c:	fb07 3610 	mls	r6, r7, r0, r3
 8000690:	0c0b      	lsrs	r3, r1, #16
 8000692:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000696:	fb00 f60e 	mul.w	r6, r0, lr
 800069a:	429e      	cmp	r6, r3
 800069c:	fa04 f402 	lsl.w	r4, r4, r2
 80006a0:	d908      	bls.n	80006b4 <__udivmoddi4+0x260>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006aa:	d22f      	bcs.n	800070c <__udivmoddi4+0x2b8>
 80006ac:	429e      	cmp	r6, r3
 80006ae:	d92d      	bls.n	800070c <__udivmoddi4+0x2b8>
 80006b0:	3802      	subs	r0, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1b9b      	subs	r3, r3, r6
 80006b6:	b289      	uxth	r1, r1
 80006b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006bc:	fb07 3316 	mls	r3, r7, r6, r3
 80006c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006c4:	fb06 f30e 	mul.w	r3, r6, lr
 80006c8:	428b      	cmp	r3, r1
 80006ca:	d908      	bls.n	80006de <__udivmoddi4+0x28a>
 80006cc:	eb1c 0101 	adds.w	r1, ip, r1
 80006d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80006d4:	d216      	bcs.n	8000704 <__udivmoddi4+0x2b0>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d914      	bls.n	8000704 <__udivmoddi4+0x2b0>
 80006da:	3e02      	subs	r6, #2
 80006dc:	4461      	add	r1, ip
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006e4:	e738      	b.n	8000558 <__udivmoddi4+0x104>
 80006e6:	462e      	mov	r6, r5
 80006e8:	4628      	mov	r0, r5
 80006ea:	e705      	b.n	80004f8 <__udivmoddi4+0xa4>
 80006ec:	4606      	mov	r6, r0
 80006ee:	e6e3      	b.n	80004b8 <__udivmoddi4+0x64>
 80006f0:	4618      	mov	r0, r3
 80006f2:	e6f8      	b.n	80004e6 <__udivmoddi4+0x92>
 80006f4:	454b      	cmp	r3, r9
 80006f6:	d2a9      	bcs.n	800064c <__udivmoddi4+0x1f8>
 80006f8:	ebb9 0802 	subs.w	r8, r9, r2
 80006fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000700:	3801      	subs	r0, #1
 8000702:	e7a3      	b.n	800064c <__udivmoddi4+0x1f8>
 8000704:	4646      	mov	r6, r8
 8000706:	e7ea      	b.n	80006de <__udivmoddi4+0x28a>
 8000708:	4620      	mov	r0, r4
 800070a:	e794      	b.n	8000636 <__udivmoddi4+0x1e2>
 800070c:	4640      	mov	r0, r8
 800070e:	e7d1      	b.n	80006b4 <__udivmoddi4+0x260>
 8000710:	46d0      	mov	r8, sl
 8000712:	e77b      	b.n	800060c <__udivmoddi4+0x1b8>
 8000714:	3b02      	subs	r3, #2
 8000716:	4461      	add	r1, ip
 8000718:	e732      	b.n	8000580 <__udivmoddi4+0x12c>
 800071a:	4630      	mov	r0, r6
 800071c:	e709      	b.n	8000532 <__udivmoddi4+0xde>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	e742      	b.n	80005aa <__udivmoddi4+0x156>

08000724 <__aeabi_idiv0>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6858      	ldr	r0, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8adb      	ldrh	r3, [r3, #22]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f002 fa01 	bl	8002b54 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	1cf9      	adds	r1, r7, #3
 800075c:	2201      	movs	r2, #1
 800075e:	f004 fa5e 	bl	8004c1e <HAL_SPI_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f107 010f 	add.w	r1, r7, #15
 8000772:	2201      	movs	r2, #1
 8000774:	f004 fb8f 	bl	8004e96 <HAL_SPI_Receive>
 8000778:	4603      	mov	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8adb      	ldrh	r3, [r3, #22]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f002 f9e4 	bl	8002b54 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
 80007a2:	4613      	mov	r3, r2
 80007a4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ac:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80007ae:	78bb      	ldrb	r3, [r7, #2]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	8adb      	ldrh	r3, [r3, #22]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f002 f9c2 	bl	8002b54 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f107 010a 	add.w	r1, r7, #10
 80007dc:	2202      	movs	r2, #2
 80007de:	f004 fa1e 	bl	8004c1e <HAL_SPI_Transmit>
 80007e2:	4603      	mov	r3, r0
 80007e4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6858      	ldr	r0, [r3, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8adb      	ldrh	r3, [r3, #22]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f002 f9af 	bl	8002b54 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b088      	sub	sp, #32
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8000814:	2300      	movs	r3, #0
 8000816:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	8adb      	ldrh	r3, [r3, #22]
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	f002 f996 	bl	8002b54 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f107 0117 	add.w	r1, r7, #23
 8000834:	2201      	movs	r2, #1
 8000836:	f004 f9f2 	bl	8004c1e <HAL_SPI_Transmit>
 800083a:	4603      	mov	r3, r0
 800083c:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10a      	bne.n	800085a <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	b292      	uxth	r2, r2
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fdd4 	bl	80053fc <HAL_SPI_Receive_DMA>
 8000854:	4603      	mov	r3, r0
 8000856:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8000858:	e012      	b.n	8000880 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	b29a      	uxth	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	68b9      	ldr	r1, [r7, #8]
 8000868:	f004 fb15 	bl	8004e96 <HAL_SPI_Receive>
 800086c:	4603      	mov	r3, r0
 800086e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6858      	ldr	r0, [r3, #4]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	8adb      	ldrh	r3, [r3, #22]
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	f002 f96a 	bl	8002b54 <HAL_GPIO_WritePin>
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	2101      	movs	r1, #1
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff78 	bl	8000796 <write_register>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b2c      	cmp	r3, #44	; 0x2c
 80008c0:	d801      	bhi.n	80008c6 <set_OCP+0x16>
    imax = 45;
 80008c2:	232d      	movs	r3, #45	; 0x2d
 80008c4:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	2bf0      	cmp	r3, #240	; 0xf0
 80008ca:	d901      	bls.n	80008d0 <set_OCP+0x20>
    imax = 240;
 80008cc:	23f0      	movs	r3, #240	; 0xf0
 80008ce:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b81      	cmp	r3, #129	; 0x81
 80008d4:	d809      	bhi.n	80008ea <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	3b2d      	subs	r3, #45	; 0x2d
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <set_OCP+0x68>)
 80008dc:	fb82 1203 	smull	r1, r2, r2, r3
 80008e0:	1052      	asrs	r2, r2, #1
 80008e2:	17db      	asrs	r3, r3, #31
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e008      	b.n	80008fc <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	331e      	adds	r3, #30
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <set_OCP+0x68>)
 80008f0:	fb82 1203 	smull	r1, r2, r2, r3
 80008f4:	1092      	asrs	r2, r2, #2
 80008f6:	17db      	asrs	r3, r3, #31
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	f043 0320 	orr.w	r3, r3, #32
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	210b      	movs	r1, #11
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff44 	bl	8000796 <write_register>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	66666667 	.word	0x66666667

0800091c <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 800091c:	b5b0      	push	{r4, r5, r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000924:	211d      	movs	r1, #29
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fefe 	bl	8000728 <read_register>
 800092c:	4603      	mov	r3, r0
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	b2db      	uxtb	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2200      	movs	r2, #0
 8000936:	461c      	mov	r4, r3
 8000938:	4615      	mov	r5, r2
 800093a:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800093e:	211e      	movs	r1, #30
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fef1 	bl	8000728 <read_register>
 8000946:	4603      	mov	r3, r0
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 800094c:	2304      	movs	r3, #4
 800094e:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b0a      	cmp	r3, #10
 8000954:	d908      	bls.n	8000968 <set_low_data_rate_optimization+0x4c>
 8000956:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800095a:	1fd1      	subs	r1, r2, #7
 800095c:	430b      	orrs	r3, r1
 800095e:	d103      	bne.n	8000968 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000968:	7ffb      	ldrb	r3, [r7, #31]
 800096a:	461a      	mov	r2, r3
 800096c:	2126      	movs	r1, #38	; 0x26
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff11 	bl	8000796 <write_register>
}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bdb0      	pop	{r4, r5, r7, pc}

0800097c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000984:	2100      	movs	r1, #0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff7e 	bl	8000888 <set_mode>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7d5b      	ldrb	r3, [r3, #21]
 80009a0:	461a      	mov	r2, r3
 80009a2:	210f      	movs	r1, #15
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fef6 	bl	8000796 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80009aa:	22f0      	movs	r2, #240	; 0xf0
 80009ac:	2112      	movs	r1, #18
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fef1 	bl	8000796 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 80009b4:	2105      	movs	r1, #5
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ff66 	bl	8000888 <set_mode>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80009cc:	2101      	movs	r1, #1
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff5a 	bl	8000888 <set_mode>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80009e4:	211d      	movs	r1, #29
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fe9e 	bl	8000728 <read_register>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	f023 0301 	bic.w	r3, r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	461a      	mov	r2, r3
 80009fc:	211d      	movs	r1, #29
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fec9 	bl	8000796 <write_register>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10e      	bne.n	8000a3e <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d901      	bls.n	8000a2a <lora_set_tx_power+0x1e>
      level = 15;
 8000a26:	230f      	movs	r3, #15
 8000a28:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	2109      	movs	r1, #9
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fead 	bl	8000796 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000a3c:	e02e      	b.n	8000a9c <lora_set_tx_power+0x90>
    if (level > 20) {
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	2b14      	cmp	r3, #20
 8000a42:	d901      	bls.n	8000a48 <lora_set_tx_power+0x3c>
      level = 20;
 8000a44:	2314      	movs	r3, #20
 8000a46:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d801      	bhi.n	8000a52 <lora_set_tx_power+0x46>
      level = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	2b11      	cmp	r3, #17
 8000a56:	d90c      	bls.n	8000a72 <lora_set_tx_power+0x66>
      level -= 3;
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	3b03      	subs	r3, #3
 8000a5c:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000a5e:	2287      	movs	r2, #135	; 0x87
 8000a60:	214d      	movs	r1, #77	; 0x4d
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fe97 	bl	8000796 <write_register>
      set_OCP(lora, 140);
 8000a68:	218c      	movs	r1, #140	; 0x8c
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff20 	bl	80008b0 <set_OCP>
 8000a70:	e008      	b.n	8000a84 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000a72:	2284      	movs	r2, #132	; 0x84
 8000a74:	214d      	movs	r1, #77	; 0x4d
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fe8d 	bl	8000796 <write_register>
      set_OCP(lora, 97);
 8000a7c:	2161      	movs	r1, #97	; 0x61
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff16 	bl	80008b0 <set_OCP>
    level -= 2;
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	3b02      	subs	r3, #2
 8000a88:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	2109      	movs	r1, #9
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fe7d 	bl	8000796 <write_register>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	f04f 0100 	mov.w	r1, #0
 8000abc:	04d9      	lsls	r1, r3, #19
 8000abe:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000ac2:	04d0      	lsls	r0, r2, #19
 8000ac4:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <lora_set_frequency+0x88>)
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	f7ff fcab 	bl	8000424 <__aeabi_uldivmod>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000ad6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	0c02      	lsrs	r2, r0, #16
 8000ae4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	b2d3      	uxtb	r3, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	2106      	movs	r1, #6
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fe50 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000af6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	0a02      	lsrs	r2, r0, #8
 8000b04:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000b08:	0a0b      	lsrs	r3, r1, #8
 8000b0a:	b2d3      	uxtb	r3, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2107      	movs	r1, #7
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff fe40 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000b16:	7c3b      	ldrb	r3, [r7, #16]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fe3a 	bl	8000796 <write_register>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	01e84800 	.word	0x01e84800

08000b30 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	d802      	bhi.n	8000b48 <lora_set_spreading_factor+0x18>
    sf = 6;
 8000b42:	2306      	movs	r3, #6
 8000b44:	70fb      	strb	r3, [r7, #3]
 8000b46:	e004      	b.n	8000b52 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b0c      	cmp	r3, #12
 8000b4c:	d901      	bls.n	8000b52 <lora_set_spreading_factor+0x22>
    sf = 12;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	d10a      	bne.n	8000b6e <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000b58:	22c5      	movs	r2, #197	; 0xc5
 8000b5a:	2131      	movs	r1, #49	; 0x31
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fe1a 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000b62:	220c      	movs	r2, #12
 8000b64:	2137      	movs	r1, #55	; 0x37
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fe15 	bl	8000796 <write_register>
 8000b6c:	e009      	b.n	8000b82 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000b6e:	22c3      	movs	r2, #195	; 0xc3
 8000b70:	2131      	movs	r1, #49	; 0x31
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fe0f 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000b78:	220a      	movs	r2, #10
 8000b7a:	2137      	movs	r1, #55	; 0x37
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fe0a 	bl	8000796 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000b82:	211e      	movs	r1, #30
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fdcf 	bl	8000728 <read_register>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	b25a      	sxtb	r2, r3
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	211e      	movs	r1, #30
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fdf6 	bl	8000796 <write_register>

  set_low_data_rate_optimization(lora);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff feb6 	bl	800091c <set_low_data_rate_optimization>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2120      	movs	r1, #32
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fde0 	bl	8000796 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	2121      	movs	r1, #33	; 0x21
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fdd6 	bl	8000796 <write_register>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8000bfa:	2112      	movs	r1, #18
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fd93 	bl	8000728 <read_register>
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c0c:	b2db      	uxtb	r3, r3
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000c1e:	211d      	movs	r1, #29
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fd81 	bl	8000728 <read_register>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000c34:	2122      	movs	r1, #34	; 0x22
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fd76 	bl	8000728 <read_register>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e005      	b.n	8000c4e <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000c42:	2113      	movs	r1, #19
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fd6f 	bl	8000728 <read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000c70:	2112      	movs	r1, #18
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fd58 	bl	8000728 <read_register>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000c7c:	22f0      	movs	r2, #240	; 0xf0
 8000c7e:	2112      	movs	r1, #18
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fd88 	bl	8000796 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000c86:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	da02      	bge.n	8000c94 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000c92:	e030      	b.n	8000cf6 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000c94:	7d7b      	ldrb	r3, [r7, #21]
 8000c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d02a      	beq.n	8000cf4 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000c9e:	7d7b      	ldrb	r3, [r7, #21]
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000cac:	e023      	b.n	8000cf6 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000cae:	7d7b      	ldrb	r3, [r7, #21]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000cbc:	e01b      	b.n	8000cf6 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff ffa9 	bl	8000c16 <lora_pending_packet_length>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000cc8:	2110      	movs	r1, #16
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff fd2c 	bl	8000728 <read_register>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000cd4:	7d3b      	ldrb	r3, [r7, #20]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	210d      	movs	r1, #13
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f7ff fd5b 	bl	8000796 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000ce0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ce4:	7dba      	ldrb	r2, [r7, #22]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fd88 	bl	80007fe <read_fifo>
    res = LORA_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]
 8000cf2:	e000      	b.n	8000cf6 <lora_receive_packet_base+0x9e>
  }

done:
 8000cf4:	bf00      	nop
  if (error) {
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <lora_receive_packet_base+0xaa>
    *error = res;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	7dfa      	ldrb	r2, [r7, #23]
 8000d00:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000d02:	7dbb      	ldrb	r3, [r7, #22]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff ff96 	bl	8000c58 <lora_receive_packet_base>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4613      	mov	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000d4a:	e00b      	b.n	8000d64 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f7ff ff50 	bl	8000bf2 <lora_is_packet_available>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10a      	bne.n	8000d6e <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f001 f82f 	bl	8001dbc <HAL_Delay>
    elapsed++;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3ef      	bcc.n	8000d4c <lora_receive_packet_blocking+0x16>
 8000d6c:	e000      	b.n	8000d70 <lora_receive_packet_blocking+0x3a>
      break;
 8000d6e:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff ffc8 	bl	8000d0c <lora_receive_packet>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000da6:	6a3a      	ldr	r2, [r7, #32]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2201      	movs	r2, #1
 8000db0:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2200      	movs	r2, #0
 8000db6:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc4:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff fdd8 	bl	800097c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f7ff fdd5 	bl	800097c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fe64 	bl	8000aa4 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000ddc:	2107      	movs	r1, #7
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff fea6 	bl	8000b30 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000de4:	210a      	movs	r1, #10
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff fee6 	bl	8000bb8 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f7ff fdf5 	bl	80009dc <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000df2:	210c      	movs	r1, #12
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f7ff fc97 	bl	8000728 <read_register>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	f043 0303 	orr.w	r3, r3, #3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	210c      	movs	r1, #12
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f7ff fcc3 	bl	8000796 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000e10:	2204      	movs	r2, #4
 8000e12:	2126      	movs	r1, #38	; 0x26
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff fcbe 	bl	8000796 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000e1a:	2111      	movs	r1, #17
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff fdf5 	bl	8000a0c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff fdce 	bl	80009c4 <lora_mode_standby>

  return LORA_OK;
 8000e28:	2300      	movs	r3, #0

}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0c6      	sub	sp, #280	; 0x118
 8000e54:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 8000e56:	4b5e      	ldr	r3, [pc, #376]	; (8000fd0 <main+0x180>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 8000e5c:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <main+0x184>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <main+0x188>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
  head_full = 0;
 8000e68:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <main+0x18c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 8000e6e:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <main+0x190>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 8000e74:	495b      	ldr	r1, [pc, #364]	; (8000fe4 <main+0x194>)
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg = 0;
 8000e82:	4b59      	ldr	r3, [pc, #356]	; (8000fe8 <main+0x198>)
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
  counter = 0;
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <main+0x19c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	801a      	strh	r2, [r3, #0]
  done = 0;
 8000e90:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <main+0x1a0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000e9c:	e00a      	b.n	8000eb4 <main+0x64>
	  circular_buf_mov[i] = 0;
 8000e9e:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <main+0x1a4>)
 8000ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eb8:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8000ebc:	dbef      	blt.n	8000e9e <main+0x4e>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ec4:	e00a      	b.n	8000edc <main+0x8c>
	  circular_buf_full[i] = 0;
 8000ec6:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <main+0x1a8>)
 8000ec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ecc:	4413      	add	r3, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000ed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ee0:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 8000ee4:	dbef      	blt.n	8000ec6 <main+0x76>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000eec:	e00a      	b.n	8000f04 <main+0xb4>
	  _sampleBuffer[i] = 0;
 8000eee:	4a43      	ldr	r2, [pc, #268]	; (8000ffc <main+0x1ac>)
 8000ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000efe:	3301      	adds	r3, #1
 8000f00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f08:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000f0c:	dbef      	blt.n	8000eee <main+0x9e>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f000 fee3 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f883 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 fa4b 	bl	80013b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f1a:	f000 f937 	bl	800118c <MX_SPI1_Init>
  MX_DMA_Init();
 8000f1e:	f000 fa11 	bl	8001344 <MX_DMA_Init>
  MX_UART4_Init();
 8000f22:	f000 f9bb 	bl	800129c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000f26:	f000 f9e3 	bl	80012f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f2a:	f000 f965 	bl	80011f8 <MX_TIM2_Init>
  MX_SAI1_Init();
 8000f2e:	f000 f8e3 	bl	80010f8 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000f32:	2108      	movs	r1, #8
 8000f34:	4832      	ldr	r0, [pc, #200]	; (8001000 <main+0x1b0>)
 8000f36:	f004 feb5 	bl	8005ca4 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4831      	ldr	r0, [pc, #196]	; (8001004 <main+0x1b4>)
 8000f40:	f001 fe08 	bl	8002b54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f000 ff39 	bl	8001dbc <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	482d      	ldr	r0, [pc, #180]	; (8001004 <main+0x1b4>)
 8000f50:	f001 fe00 	bl	8002b54 <HAL_GPIO_WritePin>

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000f54:	a31c      	add	r3, pc, #112	; (adr r3, 8000fc8 <main+0x178>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <main+0x1b8>)
 8000f62:	492a      	ldr	r1, [pc, #168]	; (800100c <main+0x1bc>)
 8000f64:	482a      	ldr	r0, [pc, #168]	; (8001010 <main+0x1c0>)
 8000f66:	f7ff ff0e 	bl	8000d86 <lora_init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if (res != LORA_OK) {
 8000f70:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <main+0x136>
    	HAL_UART_Transmit(&huart2, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	2213      	movs	r2, #19
 8000f7e:	4925      	ldr	r1, [pc, #148]	; (8001014 <main+0x1c4>)
 8000f80:	4825      	ldr	r0, [pc, #148]	; (8001018 <main+0x1c8>)
 8000f82:	f005 fc50 	bl	8006826 <HAL_UART_Transmit>
    }

    // Receive buffer
    uint8_t buffer[255];
    // Put LoRa modem into continuous receive mode
    lora_mode_receive_continuous(&lora);
 8000f86:	4822      	ldr	r0, [pc, #136]	; (8001010 <main+0x1c0>)
 8000f88:	f7ff fd04 	bl	8000994 <lora_mode_receive_continuous>
    // Wait for packet up to 4 sec

    while(1){
		uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 4000, &res);
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	f507 7381 	add.w	r3, r7, #258	; 0x102
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	481d      	ldr	r0, [pc, #116]	; (8001010 <main+0x1c0>)
 8000f9c:	f7ff fecb 	bl	8000d36 <lora_receive_packet_blocking>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		if (res == LORA_OK) {
 8000fa6:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ee      	bne.n	8000f8c <main+0x13c>
			HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000fae:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	4817      	ldr	r0, [pc, #92]	; (8001018 <main+0x1c8>)
 8000fbc:	f005 fc33 	bl	8006826 <HAL_UART_Transmit>
    while(1){
 8000fc0:	e7e4      	b.n	8000f8c <main+0x13c>
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	3689cac0 	.word	0x3689cac0
 8000fcc:	00000000 	.word	0x00000000
 8000fd0:	20002c84 	.word	0x20002c84
 8000fd4:	2000226c 	.word	0x2000226c
 8000fd8:	20002270 	.word	0x20002270
 8000fdc:	20002c6c 	.word	0x20002c6c
 8000fe0:	20002c70 	.word	0x20002c70
 8000fe4:	20002c78 	.word	0x20002c78
 8000fe8:	20002c80 	.word	0x20002c80
 8000fec:	20002c86 	.word	0x20002c86
 8000ff0:	20002c88 	.word	0x20002c88
 8000ff4:	200021a4 	.word	0x200021a4
 8000ff8:	20002274 	.word	0x20002274
 8000ffc:	200002b4 	.word	0x200002b4
 8001000:	20000184 	.word	0x20000184
 8001004:	40020800 	.word	0x40020800
 8001008:	40020400 	.word	0x40020400
 800100c:	2000012c 	.word	0x2000012c
 8001010:	20002c8c 	.word	0x20002c8c
 8001014:	20000008 	.word	0x20000008
 8001018:	20000210 	.word	0x20000210

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2234      	movs	r2, #52	; 0x34
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fbe6 	bl	80077fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <SystemClock_Config+0xd4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <SystemClock_Config+0xd4>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <SystemClock_Config+0xd4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <SystemClock_Config+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <SystemClock_Config+0xd8>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <SystemClock_Config+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2310      	movs	r3, #16
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001090:	2310      	movs	r3, #16
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001094:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800109a:	2304      	movs	r3, #4
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fe28 	bl	8003d00 <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010b6:	f000 fb51 	bl	800175c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2302      	movs	r3, #2
 80010c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2102      	movs	r1, #2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fd56 	bl	8002b88 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010e2:	f000 fb3b 	bl	800175c <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_SAI1_Init+0x84>)
 80010fe:	4a20      	ldr	r2, [pc, #128]	; (8001180 <MX_SAI1_Init+0x88>)
 8001100:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_SAI1_Init+0x84>)
 8001104:	2201      	movs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_SAI1_Init+0x84>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_SAI1_Init+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_SAI1_Init+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_SAI1_Init+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_SAI1_Init+0x84>)
 8001122:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001126:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_SAI1_Init+0x84>)
 800112a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800112e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_SAI1_Init+0x84>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_SAI1_Init+0x84>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_SAI1_Init+0x84>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001142:	2302      	movs	r3, #2
 8001144:	2202      	movs	r2, #2
 8001146:	2100      	movs	r1, #0
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_SAI1_Init+0x84>)
 800114a:	f003 f877 	bl	800423c <HAL_SAI_InitProtocol>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001154:	f000 fb02 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001158:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800115c:	4909      	ldr	r1, [pc, #36]	; (8001184 <MX_SAI1_Init+0x8c>)
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_SAI1_Init+0x84>)
 8001160:	f003 f9c8 	bl	80044f4 <HAL_SAI_Receive_DMA>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f000 fe25 	bl	8001dbc <HAL_Delay>
	  _running = true;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <MX_SAI1_Init+0x90>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000044 	.word	0x20000044
 8001180:	40015824 	.word	0x40015824
 8001184:	200002b4 	.word	0x200002b4
 8001188:	20002c84 	.word	0x20002c84

0800118c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_SPI1_Init+0x64>)
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <MX_SPI1_Init+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_SPI1_Init+0x64>)
 8001198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800119c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011c0:	2238      	movs	r2, #56	; 0x38
 80011c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011d8:	220a      	movs	r2, #10
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011de:	f003 fc95 	bl	8004b0c <HAL_SPI_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e8:	f000 fab8 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000012c 	.word	0x2000012c
 80011f4:	40013000 	.word	0x40013000

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM2_Init+0xa0>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_TIM2_Init+0xa0>)
 800122a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800123c:	4816      	ldr	r0, [pc, #88]	; (8001298 <MX_TIM2_Init+0xa0>)
 800123e:	f004 fce1 	bl	8005c04 <HAL_TIM_IC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001248:	f000 fa88 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <MX_TIM2_Init+0xa0>)
 800125c:	f005 fa06 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001266:	f000 fa79 	bl	800175c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800126e:	2301      	movs	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	2208      	movs	r2, #8
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_TIM2_Init+0xa0>)
 8001282:	f004 ff3f 	bl	8006104 <HAL_TIM_IC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800128c:	f000 fa66 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000184 	.word	0x20000184

0800129c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_UART4_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_UART4_Init+0x4c>)
 80012d4:	f005 fa5a 	bl	800678c <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 fa3d 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001cc 	.word	0x200001cc
 80012ec:	40004c00 	.word	0x40004c00

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f005 fa30 	bl	800678c <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 fa13 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000210 	.word	0x20000210
 8001340:	40004400 	.word	0x40004400

08001344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_DMA_Init+0x68>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <MX_DMA_Init+0x68>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_DMA_Init+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_DMA_Init+0x68>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <MX_DMA_Init+0x68>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_DMA_Init+0x68>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	200d      	movs	r0, #13
 8001388:	f000 fe17 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800138c:	200d      	movs	r0, #13
 800138e:	f000 fe30 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	203c      	movs	r0, #60	; 0x3c
 8001398:	f000 fe0f 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800139c:	203c      	movs	r0, #60	; 0x3c
 800139e:	f000 fe28 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <MX_GPIO_Init+0xdc>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a2f      	ldr	r2, [pc, #188]	; (800148c <MX_GPIO_Init+0xdc>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_GPIO_Init+0xdc>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <MX_GPIO_Init+0xdc>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a28      	ldr	r2, [pc, #160]	; (800148c <MX_GPIO_Init+0xdc>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <MX_GPIO_Init+0xdc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_GPIO_Init+0xdc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <MX_GPIO_Init+0xdc>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_GPIO_Init+0xdc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_GPIO_Init+0xdc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1a      	ldr	r2, [pc, #104]	; (800148c <MX_GPIO_Init+0xdc>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_GPIO_Init+0xdc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_GPIO_Init+0xe0>)
 800143c:	f001 fb8a 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_GPIO_Init+0xe4>)
 8001446:	f001 fb85 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800144a:	2320      	movs	r3, #32
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0xe0>)
 8001462:	f001 f9e3 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_GPIO_Init+0xe4>)
 800147e:	f001 f9d5 	bl	800282c <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020800 	.word	0x40020800
 8001494:	40020400 	.word	0x40020400

08001498 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer, _sendBuffer);
 80014a0:	4903      	ldr	r1, [pc, #12]	; (80014b0 <HAL_SAI_RxHalfCpltCallback+0x18>)
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 80014a4:	f000 f818 	bl	80014d8 <sendData>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20001e34 	.word	0x20001e34
 80014b4:	200002b4 	.word	0x200002b4

080014b8 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET], &_sendBuffer[MIC_SAMPLES_PER_PACKET / 2]);
 80014c0:	4903      	ldr	r1, [pc, #12]	; (80014d0 <HAL_SAI_RxCpltCallback+0x18>)
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <HAL_SAI_RxCpltCallback+0x1c>)
 80014c4:	f000 f808 	bl	80014d8 <sendData>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20001fec 	.word	0x20001fec
 80014d4:	20001074 	.word	0x20001074

080014d8 <sendData>:

void sendData(volatile int32_t *data_in, int8_t *data_out) {
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	b08a      	sub	sp, #40	; 0x28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]

  if (_running) {
 80014e4:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <sendData+0x23c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 810e 	beq.w	800170a <sendData+0x232>

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014f2:	e105      	b.n	8001700 <sendData+0x228>

        int8_t sample = ((data_in[0]>>16) & 0xff);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	141b      	asrs	r3, r3, #16
 80014fa:	77fb      	strb	r3, [r7, #31]
        moving_sum += abs(sample);
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001500:	2b00      	cmp	r3, #0
 8001502:	bfb8      	it	lt
 8001504:	425b      	neglt	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2200      	movs	r2, #0
 800150c:	461c      	mov	r4, r3
 800150e:	4615      	mov	r5, r2
 8001510:	4b81      	ldr	r3, [pc, #516]	; (8001718 <sendData+0x240>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	eb14 0a02 	adds.w	sl, r4, r2
 800151a:	eb45 0b03 	adc.w	fp, r5, r3
 800151e:	4b7e      	ldr	r3, [pc, #504]	; (8001718 <sendData+0x240>)
 8001520:	e9c3 ab00 	strd	sl, fp, [r3]
        moving_sum -= abs(circular_buf_mov[tail_mov]);
 8001524:	4b7c      	ldr	r3, [pc, #496]	; (8001718 <sendData+0x240>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	497c      	ldr	r1, [pc, #496]	; (800171c <sendData+0x244>)
 800152c:	6809      	ldr	r1, [r1, #0]
 800152e:	487c      	ldr	r0, [pc, #496]	; (8001720 <sendData+0x248>)
 8001530:	5641      	ldrsb	r1, [r0, r1]
 8001532:	2900      	cmp	r1, #0
 8001534:	bfb8      	it	lt
 8001536:	4249      	neglt	r1, r1
 8001538:	b2c9      	uxtb	r1, r1
 800153a:	b2c9      	uxtb	r1, r1
 800153c:	2000      	movs	r0, #0
 800153e:	4688      	mov	r8, r1
 8001540:	4681      	mov	r9, r0
 8001542:	ebb2 0108 	subs.w	r1, r2, r8
 8001546:	6039      	str	r1, [r7, #0]
 8001548:	eb63 0309 	sbc.w	r3, r3, r9
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <sendData+0x240>)
 8001550:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001554:	e9c3 1200 	strd	r1, r2, [r3]
    	circular_buf_mov[tail_mov] = sample;
 8001558:	4b70      	ldr	r3, [pc, #448]	; (800171c <sendData+0x244>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4970      	ldr	r1, [pc, #448]	; (8001720 <sendData+0x248>)
 800155e:	7ffa      	ldrb	r2, [r7, #31]
 8001560:	54ca      	strb	r2, [r1, r3]
    	circular_buf_full[tail_full] = sample;
 8001562:	4b70      	ldr	r3, [pc, #448]	; (8001724 <sendData+0x24c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4970      	ldr	r1, [pc, #448]	; (8001728 <sendData+0x250>)
 8001568:	7ffa      	ldrb	r2, [r7, #31]
 800156a:	54ca      	strb	r2, [r1, r3]
    	moving_avg = ((float) moving_sum)/(MOVING_AVG_LEN);
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <sendData+0x240>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7fe ff17 	bl	80003a8 <__aeabi_l2f>
 800157a:	ee06 0a90 	vmov	s13, r0
 800157e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800172c <sendData+0x254>
 8001582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001586:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <sendData+0x258>)
 8001588:	edc3 7a00 	vstr	s15, [r3]


    	if ((counter > 0) && (!done)){
 800158c:	4b69      	ldr	r3, [pc, #420]	; (8001734 <sendData+0x25c>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d05a      	beq.n	800164a <sendData+0x172>
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <sendData+0x260>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d156      	bne.n	800164a <sendData+0x172>
    		counter++;
 800159c:	4b65      	ldr	r3, [pc, #404]	; (8001734 <sendData+0x25c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b63      	ldr	r3, [pc, #396]	; (8001734 <sendData+0x25c>)
 80015a6:	801a      	strh	r2, [r3, #0]
    		if (counter == (SEND_LEN-100)){
 80015a8:	4b62      	ldr	r3, [pc, #392]	; (8001734 <sendData+0x25c>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	f640 1292 	movw	r2, #2450	; 0x992
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d14a      	bne.n	800164a <sendData+0x172>
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full, tail_full, HAL_MAX_DELAY)) != HAL_OK){
    				Error_Handler();
    			}
    			*/

    			for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	e002      	b.n	80015c0 <sendData+0xe8>
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	3301      	adds	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dbf9      	blt.n	80015ba <sendData+0xe2>
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <sendData+0x264>)
 80015c8:	681b      	ldr	r3, [r3, #0]

    			uint8_t metaData[12];
    			memcpy(metaData, &timerVal, 4);
 80015ca:	613b      	str	r3, [r7, #16]
    			memcpy(metaData+4, &devID, 4);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	3304      	adds	r3, #4
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <sendData+0x268>)
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	601a      	str	r2, [r3, #0]
    			memcpy(metaData+8, &endPadding, 4);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	3308      	adds	r3, #8
 80015de:	4a59      	ldr	r2, [pc, #356]	; (8001744 <sendData+0x26c>)
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	601a      	str	r2, [r3, #0]

    			if ((HAL_UART_Transmit(&huart2, metaData, 12, HAL_MAX_DELAY)) != HAL_OK){
 80015e4:	f107 0110 	add.w	r1, r7, #16
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ec:	220c      	movs	r2, #12
 80015ee:	4856      	ldr	r0, [pc, #344]	; (8001748 <sendData+0x270>)
 80015f0:	f005 f919 	bl	8006826 <HAL_UART_Transmit>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <sendData+0x126>
    			    				Error_Handler();
 80015fa:	f000 f8af 	bl	800175c <Error_Handler>
    			}

    			if ((HAL_UART_Transmit(&huart2, circular_buf_full + tail_full, (SEND_LEN)-tail_full, HAL_MAX_DELAY)) != HAL_OK){
 80015fe:	4b49      	ldr	r3, [pc, #292]	; (8001724 <sendData+0x24c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a49      	ldr	r2, [pc, #292]	; (8001728 <sendData+0x250>)
 8001604:	1899      	adds	r1, r3, r2
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <sendData+0x24c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8001610:	3306      	adds	r3, #6
 8001612:	b29a      	uxth	r2, r3
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001618:	484b      	ldr	r0, [pc, #300]	; (8001748 <sendData+0x270>)
 800161a:	f005 f904 	bl	8006826 <HAL_UART_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <sendData+0x150>
    				Error_Handler();
 8001624:	f000 f89a 	bl	800175c <Error_Handler>
    			}
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full, tail_full, HAL_MAX_DELAY)) != HAL_OK){
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <sendData+0x24c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29a      	uxth	r2, r3
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001632:	493d      	ldr	r1, [pc, #244]	; (8001728 <sendData+0x250>)
 8001634:	4844      	ldr	r0, [pc, #272]	; (8001748 <sendData+0x270>)
 8001636:	f005 f8f6 	bl	8006826 <HAL_UART_Transmit>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <sendData+0x16c>
    				Error_Handler();
 8001640:	f000 f88c 	bl	800175c <Error_Handler>
    				// for(int delay = 0; delay < 5000000; delay++); // non-blocking delay
    			}

    			*/

    			done = 1;
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <sendData+0x260>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
    		}
    	}

    	if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <sendData+0x258>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	db12      	blt.n	8001684 <sendData+0x1ac>
 800165e:	4b35      	ldr	r3, [pc, #212]	; (8001734 <sendData+0x25c>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <sendData+0x1ac>
    		counter += 1;
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <sendData+0x25c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <sendData+0x25c>)
 8001670:	801a      	strh	r2, [r3, #0]
    		done = 0;
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <sendData+0x260>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
			timerVal = TIM2->CNT;
 8001678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	461a      	mov	r2, r3
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <sendData+0x264>)
 8001682:	601a      	str	r2, [r3, #0]
			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&endflag, 4, 70) != HAL_OK)){
			    				Error_Handler();
			}
			*/
    	}
        tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <sendData+0x244>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <sendData+0x274>)
 800168c:	fba3 1302 	umull	r1, r3, r3, r2
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	21c8      	movs	r1, #200	; 0xc8
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	4a20      	ldr	r2, [pc, #128]	; (800171c <sendData+0x244>)
 800169c:	6013      	str	r3, [r2, #0]
        head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <sendData+0x278>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <sendData+0x274>)
 80016a6:	fba3 1302 	umull	r1, r3, r3, r2
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	21c8      	movs	r1, #200	; 0xc8
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	4a26      	ldr	r2, [pc, #152]	; (8001750 <sendData+0x278>)
 80016b6:	6013      	str	r3, [r2, #0]

        tail_full = (tail_full + 1) % (SEND_LEN);
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <sendData+0x24c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	0853      	lsrs	r3, r2, #1
 80016c0:	4924      	ldr	r1, [pc, #144]	; (8001754 <sendData+0x27c>)
 80016c2:	fba1 1303 	umull	r1, r3, r1, r3
 80016c6:	0a9b      	lsrs	r3, r3, #10
 80016c8:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <sendData+0x24c>)
 80016d4:	6013      	str	r3, [r2, #0]
        head_full = (head_full + 1) % (SEND_LEN);
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <sendData+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	0853      	lsrs	r3, r2, #1
 80016de:	491d      	ldr	r1, [pc, #116]	; (8001754 <sendData+0x27c>)
 80016e0:	fba1 1303 	umull	r1, r3, r1, r3
 80016e4:	0a9b      	lsrs	r3, r3, #10
 80016e6:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <sendData+0x280>)
 80016f2:	6013      	str	r3, [r2, #0]

        data_in += 2;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3308      	adds	r3, #8
 80016f8:	60fb      	str	r3, [r7, #12]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80016fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016fc:	3301      	adds	r3, #1
 80016fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001702:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001706:	f4ff aef5 	bcc.w	80014f4 <sendData+0x1c>
      }


  }
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001714:	20002c84 	.word	0x20002c84
 8001718:	20002c78 	.word	0x20002c78
 800171c:	20002270 	.word	0x20002270
 8001720:	200021a4 	.word	0x200021a4
 8001724:	20002c70 	.word	0x20002c70
 8001728:	20002274 	.word	0x20002274
 800172c:	43480000 	.word	0x43480000
 8001730:	20002c80 	.word	0x20002c80
 8001734:	20002c86 	.word	0x20002c86
 8001738:	20002c88 	.word	0x20002c88
 800173c:	20002ca4 	.word	0x20002ca4
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004
 8001748:	20000210 	.word	0x20000210
 800174c:	51eb851f 	.word	0x51eb851f
 8001750:	2000226c 	.word	0x2000226c
 8001754:	cd9a6735 	.word	0xcd9a6735
 8001758:	20002c6c 	.word	0x20002c6c

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_SPI_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12b      	bne.n	8001832 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_SPI_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_SPI_MspInit+0x88>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_SPI_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23e0      	movs	r3, #224	; 0xe0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001822:	2305      	movs	r3, #5
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_SPI_MspInit+0x8c>)
 800182e:	f000 fffd 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40013000 	.word	0x40013000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d134      	bne.n	80018d4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b4:	2301      	movs	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <HAL_TIM_IC_MspInit+0x98>)
 80018c0:	f000 ffb4 	bl	800282c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	201c      	movs	r0, #28
 80018ca:	f000 fb76 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ce:	201c      	movs	r0, #28
 80018d0:	f000 fb8f 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_UART_MspInit+0x158>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d164      	bne.n	80019d0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 8001910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800193e:	2303      	movs	r3, #3
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800194e:	2308      	movs	r3, #8
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	483a      	ldr	r0, [pc, #232]	; (8001a44 <HAL_UART_MspInit+0x160>)
 800195a:	f000 ff67 	bl	800282c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_UART_MspInit+0x164>)
 8001960:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_UART_MspInit+0x168>)
 8001962:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_UART_MspInit+0x164>)
 8001966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_UART_MspInit+0x164>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_UART_MspInit+0x164>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_UART_MspInit+0x164>)
 800197a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_UART_MspInit+0x164>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_UART_MspInit+0x164>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_UART_MspInit+0x164>)
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_UART_MspInit+0x164>)
 8001996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800199a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_UART_MspInit+0x164>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80019a2:	4829      	ldr	r0, [pc, #164]	; (8001a48 <HAL_UART_MspInit+0x164>)
 80019a4:	f000 fb40 	bl	8002028 <HAL_DMA_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80019ae:	f7ff fed5 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <HAL_UART_MspInit+0x164>)
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
 80019b8:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_UART_MspInit+0x164>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2034      	movs	r0, #52	; 0x34
 80019c4:	f000 faf9 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019c8:	2034      	movs	r0, #52	; 0x34
 80019ca:	f000 fb12 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	e030      	b.n	8001a32 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_UART_MspInit+0x16c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12b      	bne.n	8001a32 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_UART_MspInit+0x15c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a12:	230c      	movs	r3, #12
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a22:	2307      	movs	r3, #7
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_UART_MspInit+0x160>)
 8001a2e:	f000 fefd 	bl	800282c <HAL_GPIO_Init>
}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	; 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40004c00 	.word	0x40004c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	20000254 	.word	0x20000254
 8001a4c:	40026040 	.word	0x40026040
 8001a50:	40004400 	.word	0x40004400

08001a54 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0a0      	sub	sp, #128	; 0x80
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	225c      	movs	r2, #92	; 0x5c
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fec9 	bl	80077fc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_SAI_MspInit+0x14c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f040 8091 	bne.w	8001b98 <HAL_SAI_MspInit+0x144>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001a76:	2304      	movs	r3, #4
 8001a78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 f990 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8001aa2:	f7ff fe5b 	bl	800175c <Error_Handler>
    }

      if (SAI1_client == 0)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_SAI_MspInit+0x150>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_SAI_MspInit+0x154>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <HAL_SAI_MspInit+0x154>)
 8001ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_SAI_MspInit+0x154>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_SAI_MspInit+0x150>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_SAI_MspInit+0x150>)
 8001ad2:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8001ad4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aee:	4619      	mov	r1, r3
 8001af0:	482e      	ldr	r0, [pc, #184]	; (8001bac <HAL_SAI_MspInit+0x158>)
 8001af2:	f000 fe9b 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b08:	2306      	movs	r3, #6
 8001b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b10:	4619      	mov	r1, r3
 8001b12:	4827      	ldr	r0, [pc, #156]	; (8001bb0 <HAL_SAI_MspInit+0x15c>)
 8001b14:	f000 fe8a 	bl	800282c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b1a:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_SAI_MspInit+0x164>)
 8001b1c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b24:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b38:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b40:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b50:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001b70:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b72:	f000 fa59 	bl	8002028 <HAL_DMA_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 8001b7c:	f7ff fdee 	bl	800175c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b84:	675a      	str	r2, [r3, #116]	; 0x74
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b90:	671a      	str	r2, [r3, #112]	; 0x70
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_SAI_MspInit+0x160>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001b98:	bf00      	nop
 8001b9a:	3780      	adds	r7, #128	; 0x80
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40015824 	.word	0x40015824
 8001ba4:	20002ca8 	.word	0x20002ca8
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	200000cc 	.word	0x200000cc
 8001bb8:	40026470 	.word	0x40026470

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 f8b8 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA1_Stream2_IRQHandler+0x10>)
 8001c16:	f000 fb9f 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000254 	.word	0x20000254

08001c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM2_IRQHandler+0x10>)
 8001c2a:	f004 f963 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000184 	.word	0x20000184

08001c38 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <UART4_IRQHandler+0x10>)
 8001c3e:	f004 fe85 	bl	800694c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001cc 	.word	0x200001cc

08001c4c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10>)
 8001c52:	f000 fb81 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200000cc 	.word	0x200000cc

08001c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c8a:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca0:	4c0b      	ldr	r4, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cae:	f7ff ffd7 	bl	8001c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f005 fd7f 	bl	80077b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7ff f8cb 	bl	8000e50 <main>
  bx  lr    
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001cc8:	08007854 	.word	0x08007854
  ldr r2, =_sbss
 8001ccc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001cd0:	20002cb0 	.word	0x20002cb0

08001cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <HAL_Init+0x40>)
 8001ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_Init+0x40>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_Init+0x40>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f94f 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff fd2c 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f967 	bl	800200e <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d58:	f000 f92f 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000001c 	.word	0x2000001c
 8001d74:	20000024 	.word	0x20000024
 8001d78:	20000020 	.word	0x20000020

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000024 	.word	0x20000024
 8001da0:	20002cac 	.word	0x20002cac

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20002cac 	.word	0x20002cac

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000024 	.word	0x20000024

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff feb6 	bl	8001da4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e099      	b.n	8002178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002064:	e00f      	b.n	8002086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002066:	f7ff fe9d 	bl	8001da4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b05      	cmp	r3, #5
 8002072:	d908      	bls.n	8002086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e078      	b.n	8002178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e8      	bne.n	8002066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_DMA_Init+0x158>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d107      	bne.n	80020f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4313      	orrs	r3, r2
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f023 0307 	bic.w	r3, r3, #7
 8002106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b04      	cmp	r3, #4
 8002118:	d117      	bne.n	800214a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fb01 	bl	8002734 <DMA_CheckFifoParam>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002146:	2301      	movs	r3, #1
 8002148:	e016      	b.n	8002178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fab8 	bl	80026c8 <DMA_CalcBaseAndBitshift>
 8002158:	4603      	mov	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	223f      	movs	r2, #63	; 0x3f
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	f010803f 	.word	0xf010803f

08002184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_DMA_Start_IT+0x26>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e040      	b.n	800222c <HAL_DMA_Start_IT+0xa8>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d12f      	bne.n	800221e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa4a 	bl	800266c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	223f      	movs	r2, #63	; 0x3f
 80021de:	409a      	lsls	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0216 	orr.w	r2, r2, #22
 80021f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0208 	orr.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e005      	b.n	800222a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800222a:	7dfb      	ldrb	r3, [r7, #23]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002242:	f7ff fdaf 	bl	8001da4 <HAL_GetTick>
 8002246:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d008      	beq.n	8002266 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e052      	b.n	800230c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0216 	bic.w	r2, r2, #22
 8002274:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002284:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d103      	bne.n	8002296 <HAL_DMA_Abort+0x62>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0208 	bic.w	r2, r2, #8
 80022a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b6:	e013      	b.n	80022e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b8:	f7ff fd74 	bl	8001da4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d90c      	bls.n	80022e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2203      	movs	r2, #3
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e015      	b.n	800230c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1e4      	bne.n	80022b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	223f      	movs	r2, #63	; 0x3f
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d004      	beq.n	8002332 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00c      	b.n	800234c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2205      	movs	r2, #5
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002364:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <HAL_DMA_IRQHandler+0x248>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a8e      	ldr	r2, [pc, #568]	; (80025a4 <HAL_DMA_IRQHandler+0x24c>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	2208      	movs	r2, #8
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2208      	movs	r2, #8
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	2204      	movs	r2, #4
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2204      	movs	r2, #4
 800241e:	409a      	lsls	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0204 	orr.w	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	2210      	movs	r2, #16
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d043      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d03c      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2210      	movs	r2, #16
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d108      	bne.n	8002488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d024      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	e01f      	b.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e016      	b.n	80024c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0208 	bic.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2220      	movs	r2, #32
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 808f 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8087 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	2220      	movs	r2, #32
 80024f0:	409a      	lsls	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d136      	bne.n	8002570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0216 	bic.w	r2, r2, #22
 8002510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_DMA_IRQHandler+0x1da>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0208 	bic.w	r2, r2, #8
 8002540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	223f      	movs	r2, #63	; 0x3f
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	2b00      	cmp	r3, #0
 8002564:	d07e      	beq.n	8002664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
        }
        return;
 800256e:	e079      	b.n	8002664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01d      	beq.n	80025ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	2b00      	cmp	r3, #0
 8002592:	d031      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e02c      	b.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
 800259e:	bf00      	nop
 80025a0:	2000001c 	.word	0x2000001c
 80025a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e01e      	b.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10f      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0210 	bic.w	r2, r2, #16
 80025d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d032      	beq.n	8002666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d022      	beq.n	8002652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2205      	movs	r2, #5
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3301      	adds	r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	d307      	bcc.n	8002640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f2      	bne.n	8002624 <HAL_DMA_IRQHandler+0x2cc>
 800263e:	e000      	b.n	8002642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
 8002662:	e000      	b.n	8002666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002664:	bf00      	nop
    }
  }
}
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d108      	bne.n	80026ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026aa:	e007      	b.n	80026bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3b10      	subs	r3, #16
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <DMA_CalcBaseAndBitshift+0x64>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <DMA_CalcBaseAndBitshift+0x68>)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d909      	bls.n	800270a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	1d1a      	adds	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	; 0x58
 8002708:	e007      	b.n	800271a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	aaaaaaab 	.word	0xaaaaaaab
 8002730:	0800783c 	.word	0x0800783c

08002734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11f      	bne.n	800278e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d856      	bhi.n	8002802 <DMA_CheckFifoParam+0xce>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <DMA_CheckFifoParam+0x28>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	0800277f 	.word	0x0800277f
 8002764:	0800276d 	.word	0x0800276d
 8002768:	08002803 	.word	0x08002803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d046      	beq.n	8002806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e043      	b.n	8002806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002786:	d140      	bne.n	800280a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278c:	e03d      	b.n	800280a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002796:	d121      	bne.n	80027dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d837      	bhi.n	800280e <DMA_CheckFifoParam+0xda>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <DMA_CheckFifoParam+0x70>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027bb 	.word	0x080027bb
 80027ac:	080027b5 	.word	0x080027b5
 80027b0:	080027cd 	.word	0x080027cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e030      	b.n	800281c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d025      	beq.n	8002812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ca:	e022      	b.n	8002812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d4:	d11f      	bne.n	8002816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027da:	e01c      	b.n	8002816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d903      	bls.n	80027ea <DMA_CheckFifoParam+0xb6>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d003      	beq.n	80027f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e8:	e018      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      break;
 80027ee:	e015      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e00b      	b.n	800281a <DMA_CheckFifoParam+0xe6>
      break;
 8002802:	bf00      	nop
 8002804:	e00a      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e008      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e006      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e004      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;   
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
    }
  } 
  
  return status; 
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e165      	b.n	8002b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8154 	bne.w	8002b0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ae 	beq.w	8002b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_GPIO_Init+0x304>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x308>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d025      	beq.n	8002a46 <HAL_GPIO_Init+0x21a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_GPIO_Init+0x30c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01f      	beq.n	8002a42 <HAL_GPIO_Init+0x216>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4d      	ldr	r2, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x310>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d019      	beq.n	8002a3e <HAL_GPIO_Init+0x212>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4c      	ldr	r2, [pc, #304]	; (8002b40 <HAL_GPIO_Init+0x314>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_GPIO_Init+0x318>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x20a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_GPIO_Init+0x31c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x206>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a49      	ldr	r2, [pc, #292]	; (8002b4c <HAL_GPIO_Init+0x320>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x202>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a66:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8a:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae96 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40021400 	.word	0x40021400
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0cc      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d90c      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b8      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d044      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d119      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e07f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e067      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4934      	ldr	r1, [pc, #208]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c78:	f7ff f894 	bl	8001da4 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7ff f890 	bl	8001da4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e04f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d20c      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e032      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4916      	ldr	r1, [pc, #88]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	490e      	ldr	r1, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d0e:	f000 fdc7 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	490a      	ldr	r1, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	5ccb      	ldrb	r3, [r1, r3]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fff4 	bl	8001d1c <HAL_InitTick>

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00
 8002d44:	40023800 	.word	0x40023800
 8002d48:	08007824 	.word	0x08007824
 8002d4c:	2000001c 	.word	0x2000001c
 8002d50:	20000020 	.word	0x20000020

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000001c 	.word	0x2000001c

08002d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d70:	f7ff fff0 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	0a9b      	lsrs	r3, r3, #10
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	4903      	ldr	r1, [pc, #12]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d82:	5ccb      	ldrb	r3, [r1, r3]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	08007834 	.word	0x08007834

08002d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d98:	f7ff ffdc 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0b5b      	lsrs	r3, r3, #13
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	4903      	ldr	r1, [pc, #12]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	08007834 	.word	0x08007834

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002df4:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	496c      	ldr	r1, [pc, #432]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002e12:	2301      	movs	r3, #1
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e22:	4b64      	ldr	r3, [pc, #400]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	4960      	ldr	r1, [pc, #384]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002e40:	2301      	movs	r3, #1
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d017      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e50:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4955      	ldr	r1, [pc, #340]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002e70:	2301      	movs	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e8c:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	4946      	ldr	r1, [pc, #280]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002eac:	2301      	movs	r3, #1
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 808a 	beq.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a38      	ldr	r2, [pc, #224]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ee6:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe ff57 	bl	8001da4 <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe ff53 	bl	8001da4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e278      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f20:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f30:	6a3a      	ldr	r2, [r7, #32]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d028      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f36:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d114      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe ff21 	bl	8001da4 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe ff1d 	bl	8001da4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e240      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f94:	d114      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	4902      	ldr	r1, [pc, #8]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
 8002fb0:	e00c      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	42470e40 	.word	0x42470e40
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a49      	ldr	r2, [pc, #292]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fca:	6093      	str	r3, [r2, #8]
 8002fcc:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	4944      	ldr	r1, [pc, #272]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ff2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003000:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	4937      	ldr	r1, [pc, #220]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003022:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003028:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003030:	492e      	ldr	r1, [pc, #184]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d011      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003044:	4b29      	ldr	r3, [pc, #164]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	4926      	ldr	r1, [pc, #152]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003062:	d101      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003064:	2301      	movs	r3, #1
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	491a      	ldr	r1, [pc, #104]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d011      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	4911      	ldr	r1, [pc, #68]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80030b6:	2301      	movs	r3, #1
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d005      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	f040 80ff 	bne.w	80032ca <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d2:	f7fe fe67 	bl	8001da4 <HAL_GetTick>
 80030d6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030da:	f7fe fe63 	bl	8001da4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e188      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	424711e0 	.word	0x424711e0
 80030f4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ea      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003120:	2b00      	cmp	r3, #0
 8003122:	d028      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d124      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800312c:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	3301      	adds	r3, #1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003144:	0e1b      	lsrs	r3, r3, #24
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	019b      	lsls	r3, r3, #6
 8003156:	431a      	orrs	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	3b01      	subs	r3, #1
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	431a      	orrs	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	071b      	lsls	r3, r3, #28
 800316e:	4961      	ldr	r1, [pc, #388]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003194:	2b00      	cmp	r3, #0
 8003196:	d035      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a0:	d130      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	3301      	adds	r3, #1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	019b      	lsls	r3, r3, #6
 80031cc:	431a      	orrs	r2, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	3b01      	subs	r3, #1
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	431a      	orrs	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	071b      	lsls	r3, r3, #28
 80031e4:	4943      	ldr	r1, [pc, #268]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f2:	f023 021f 	bic.w	r2, r3, #31
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	493d      	ldr	r1, [pc, #244]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d029      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003218:	d124      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800322e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003232:	0f1b      	lsrs	r3, r3, #28
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	071b      	lsls	r3, r3, #28
 800325c:	4925      	ldr	r1, [pc, #148]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	3b01      	subs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	071b      	lsls	r3, r3, #28
 8003296:	4917      	ldr	r1, [pc, #92]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe fd7e 	bl	8001da4 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032ac:	f7fe fd7a 	bl	8001da4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e09f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 8095 	bne.w	80033fc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032d8:	f7fe fd64 	bl	8001da4 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032de:	e00f      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032e0:	f7fe fd60 	bl	8001da4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d908      	bls.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e085      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470068 	.word	0x42470068
 80032fc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800330c:	d0e8      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02b      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	2b00      	cmp	r3, #0
 8003334:	d127      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	3301      	adds	r3, #1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	431a      	orrs	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	3b01      	subs	r3, #1
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	061b      	lsls	r3, r3, #24
 8003364:	4928      	ldr	r1, [pc, #160]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800336c:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003372:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	3b01      	subs	r3, #1
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	4922      	ldr	r1, [pc, #136]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01d      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339a:	d118      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	0e1b      	lsrs	r3, r3, #24
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	019b      	lsls	r3, r3, #6
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fce6 	bl	8001da4 <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033dc:	f7fe fce2 	bl	8001da4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e007      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d1ef      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3730      	adds	r7, #48	; 0x30
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	42470070 	.word	0x42470070

08003410 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	2b07      	cmp	r3, #7
 8003436:	f200 8224 	bhi.w	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003643 	.word	0x08003643
 8003444:	0800376d 	.word	0x0800376d
 8003448:	08003883 	.word	0x08003883
 800344c:	08003461 	.word	0x08003461
 8003450:	08003883 	.word	0x08003883
 8003454:	08003883 	.word	0x08003883
 8003458:	08003883 	.word	0x08003883
 800345c:	08003461 	.word	0x08003461
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003460:	4ba8      	ldr	r3, [pc, #672]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003466:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003476:	f000 80d6 	beq.w	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003480:	f200 80dd 	bhi.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800348a:	f000 809f 	beq.w	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003494:	f200 80d3 	bhi.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349e:	d05b      	beq.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a6:	f200 80ca 	bhi.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b0:	f000 80b6 	beq.w	8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ba:	f200 80c0 	bhi.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c4:	f000 8082 	beq.w	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ce:	f200 80b6 	bhi.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d03b      	beq.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80034e0:	e0ad      	b.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80034e2:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80034ee:	4b85      	ldr	r3, [pc, #532]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f8:	4a83      	ldr	r2, [pc, #524]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e008      	b.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003502:	4b80      	ldr	r3, [pc, #512]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	4a7f      	ldr	r2, [pc, #508]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003514:	4b7b      	ldr	r3, [pc, #492]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	0e1b      	lsrs	r3, r3, #24
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003522:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	099b      	lsrs	r3, r3, #6
 800352a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	fb03 f202 	mul.w	r2, r3, r2
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800353c:	4b71      	ldr	r3, [pc, #452]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800353e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	61fb      	str	r3, [r7, #28]
          break;
 8003556:	e073      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003564:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356e:	4a66      	ldr	r2, [pc, #408]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e008      	b.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003578:	4b62      	ldr	r3, [pc, #392]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003582:	4a62      	ldr	r2, [pc, #392]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800358a:	4b5e      	ldr	r3, [pc, #376]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800358c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003590:	0e1b      	lsrs	r3, r3, #24
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003598:	4b5a      	ldr	r3, [pc, #360]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	fb03 f202 	mul.w	r2, r3, r2
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	61fb      	str	r3, [r7, #28]
          break;
 80035ca:	e039      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035d8:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e0:	4a49      	ldr	r2, [pc, #292]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e007      	b.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80035ea:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f2:	4a46      	ldr	r2, [pc, #280]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80035fa:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0f1b      	lsrs	r3, r3, #28
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	fb03 f202 	mul.w	r2, r3, r2
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	61fb      	str	r3, [r7, #28]
          break;
 800361e:	e00f      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003620:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003622:	61fb      	str	r3, [r7, #28]
          break;
 8003624:	e00c      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003632:	4b35      	ldr	r3, [pc, #212]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003634:	61fb      	str	r3, [r7, #28]
          break;
 8003636:	e003      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800363a:	61fb      	str	r3, [r7, #28]
          break;
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800363e:	bf00      	nop
        }
      }
      break;
 8003640:	e11f      	b.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003648:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003654:	d079      	beq.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800365c:	f200 8082 	bhi.w	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003666:	d03c      	beq.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366e:	d879      	bhi.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367c:	d172      	bne.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003680:	61fb      	str	r3, [r7, #28]
          break;
 8003682:	e072      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003684:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003690:	d109      	bne.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e008      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036be:	099b      	lsrs	r3, r3, #6
 80036c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	61fb      	str	r3, [r7, #28]
          break;
 80036e0:	e043      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ee:	d111      	bne.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e010      	b.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	00f42400 	.word	0x00f42400
 800370c:	007a1200 	.word	0x007a1200
 8003710:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003714:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003724:	4b5a      	ldr	r3, [pc, #360]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0f1b      	lsrs	r3, r3, #28
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	61fb      	str	r3, [r7, #28]
          break;
 8003748:	e00f      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800374a:	4b51      	ldr	r3, [pc, #324]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003756:	d102      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800375a:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800375c:	e005      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800375e:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003760:	61fb      	str	r3, [r7, #28]
          break;
 8003762:	e002      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
          break;
 8003768:	bf00      	nop
        }
      }
      break;
 800376a:	e08a      	b.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800376c:	4b48      	ldr	r3, [pc, #288]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800376e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003772:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800377e:	d06f      	beq.n	8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003786:	d878      	bhi.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800378e:	d03c      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003796:	d870      	bhi.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a4:	d169      	bne.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80037a8:	61fb      	str	r3, [r7, #28]
          break;
 80037aa:	e069      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037ac:	4b38      	ldr	r3, [pc, #224]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d109      	bne.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037ba:	4b35      	ldr	r3, [pc, #212]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c4:	4a34      	ldr	r2, [pc, #208]	; (8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e008      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037e0:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037f4:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	0f1b      	lsrs	r3, r3, #28
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	61fb      	str	r3, [r7, #28]
          break;
 8003808:	e03a      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003816:	d108      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003832:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800384c:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0f1b      	lsrs	r3, r3, #28
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	61fb      	str	r3, [r7, #28]
          break;
 800385e:	e00f      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386c:	d102      	bne.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003870:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003872:	e005      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003876:	61fb      	str	r3, [r7, #28]
          break;
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
          break;
 800387e:	bf00      	nop
        }
      }
      break;
 8003880:	bf00      	nop
    }
  }
  return frequency;
 8003882:	69fb      	ldr	r3, [r7, #28]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3724      	adds	r7, #36	; 0x24
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40023800 	.word	0x40023800
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200
 800389c:	00bb8000 	.word	0x00bb8000

080038a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a4:	b0ae      	sub	sp, #184	; 0xb8
 80038a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c6:	4bcb      	ldr	r3, [pc, #812]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	f200 8206 	bhi.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x440>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003911 	.word	0x08003911
 80038e0:	08003ce1 	.word	0x08003ce1
 80038e4:	08003ce1 	.word	0x08003ce1
 80038e8:	08003ce1 	.word	0x08003ce1
 80038ec:	08003919 	.word	0x08003919
 80038f0:	08003ce1 	.word	0x08003ce1
 80038f4:	08003ce1 	.word	0x08003ce1
 80038f8:	08003ce1 	.word	0x08003ce1
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003ce1 	.word	0x08003ce1
 8003904:	08003ce1 	.word	0x08003ce1
 8003908:	08003ce1 	.word	0x08003ce1
 800390c:	08003b11 	.word	0x08003b11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4bb9      	ldr	r3, [pc, #740]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003916:	e1e7      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4bb8      	ldr	r3, [pc, #736]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x35c>)
 800391a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800391e:	e1e3      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003920:	4bb4      	ldr	r3, [pc, #720]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800392c:	4bb1      	ldr	r3, [pc, #708]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d071      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003938:	4bae      	ldr	r3, [pc, #696]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	2200      	movs	r2, #0
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003944:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800395a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	0159      	lsls	r1, r3, #5
 800396c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003970:	0150      	lsls	r0, r2, #5
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4621      	mov	r1, r4
 8003978:	1a51      	subs	r1, r2, r1
 800397a:	6439      	str	r1, [r7, #64]	; 0x40
 800397c:	4629      	mov	r1, r5
 800397e:	eb63 0301 	sbc.w	r3, r3, r1
 8003982:	647b      	str	r3, [r7, #68]	; 0x44
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003990:	4649      	mov	r1, r9
 8003992:	018b      	lsls	r3, r1, #6
 8003994:	4641      	mov	r1, r8
 8003996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800399a:	4641      	mov	r1, r8
 800399c:	018a      	lsls	r2, r1, #6
 800399e:	4641      	mov	r1, r8
 80039a0:	1a51      	subs	r1, r2, r1
 80039a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039a4:	4649      	mov	r1, r9
 80039a6:	eb63 0301 	sbc.w	r3, r3, r1
 80039aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039b8:	4649      	mov	r1, r9
 80039ba:	00cb      	lsls	r3, r1, #3
 80039bc:	4641      	mov	r1, r8
 80039be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c2:	4641      	mov	r1, r8
 80039c4:	00ca      	lsls	r2, r1, #3
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	4622      	mov	r2, r4
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 80039d2:	462b      	mov	r3, r5
 80039d4:	460a      	mov	r2, r1
 80039d6:	eb42 0303 	adc.w	r3, r2, r3
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039e8:	4629      	mov	r1, r5
 80039ea:	024b      	lsls	r3, r1, #9
 80039ec:	4621      	mov	r1, r4
 80039ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039f2:	4621      	mov	r1, r4
 80039f4:	024a      	lsls	r2, r1, #9
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a0c:	f7fc fd0a 	bl	8000424 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4613      	mov	r3, r2
 8003a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a1a:	e067      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1c:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a28:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a36:	2300      	movs	r3, #0
 8003a38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	0159      	lsls	r1, r3, #5
 8003a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a50:	0150      	lsls	r0, r2, #5
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4621      	mov	r1, r4
 8003a58:	1a51      	subs	r1, r2, r1
 8003a5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a70:	4649      	mov	r1, r9
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	4641      	mov	r1, r8
 8003a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	018a      	lsls	r2, r1, #6
 8003a7e:	4641      	mov	r1, r8
 8003a80:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a84:	4649      	mov	r1, r9
 8003a86:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	469b      	mov	fp, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	eb1a 0303 	adds.w	r3, sl, r3
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	462b      	mov	r3, r5
 8003aac:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003abe:	4629      	mov	r1, r5
 8003ac0:	028b      	lsls	r3, r1, #10
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac8:	4621      	mov	r1, r4
 8003aca:	028a      	lsls	r2, r1, #10
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ad8:	677a      	str	r2, [r7, #116]	; 0x74
 8003ada:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ade:	f7fc fca1 	bl	8000424 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b0e:	e0eb      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b10:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d06b      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b28:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	2200      	movs	r2, #0
 8003b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b44:	4622      	mov	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	1a51      	subs	r1, r2, r1
 8003b60:	61b9      	str	r1, [r7, #24]
 8003b62:	4629      	mov	r1, r5
 8003b64:	eb63 0301 	sbc.w	r3, r3, r1
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b76:	4659      	mov	r1, fp
 8003b78:	018b      	lsls	r3, r1, #6
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b80:	4651      	mov	r1, sl
 8003b82:	018a      	lsls	r2, r1, #6
 8003b84:	4651      	mov	r1, sl
 8003b86:	ebb2 0801 	subs.w	r8, r2, r1
 8003b8a:	4659      	mov	r1, fp
 8003b8c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba4:	4690      	mov	r8, r2
 8003ba6:	4699      	mov	r9, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	eb18 0303 	adds.w	r3, r8, r3
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	eb49 0303 	adc.w	r3, r9, r3
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	024b      	lsls	r3, r1, #9
 8003bc8:	4621      	mov	r1, r4
 8003bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bce:	4621      	mov	r1, r4
 8003bd0:	024a      	lsls	r2, r1, #9
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bda:	2200      	movs	r2, #0
 8003bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003be0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003be4:	f7fc fc1e 	bl	8000424 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bf2:	e065      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x420>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c00:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	2200      	movs	r2, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c10:	653b      	str	r3, [r7, #80]	; 0x50
 8003c12:	2300      	movs	r3, #0
 8003c14:	657b      	str	r3, [r7, #84]	; 0x54
 8003c16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c1a:	4642      	mov	r2, r8
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4641      	mov	r1, r8
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	4649      	mov	r1, r9
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c56:	4651      	mov	r1, sl
 8003c58:	018a      	lsls	r2, r1, #6
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	1a54      	subs	r4, r2, r1
 8003c5e:	4659      	mov	r1, fp
 8003c60:	eb63 0501 	sbc.w	r5, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ca8:	2200      	movs	r2, #0
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cb2:	f7fc fbb7 	bl	8000424 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4613      	mov	r3, r2
 8003cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	0f1b      	lsrs	r3, r3, #28
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	37b8      	adds	r7, #184	; 0xb8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	00f42400 	.word	0x00f42400

08003d00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e28d      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8083 	beq.w	8003e26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d20:	4b94      	ldr	r3, [pc, #592]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d019      	beq.n	8003d60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d2c:	4b91      	ldr	r3, [pc, #580]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d38:	4b8e      	ldr	r3, [pc, #568]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d44:	d00c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4b8b      	ldr	r3, [pc, #556]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d112      	bne.n	8003d78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d52:	4b88      	ldr	r3, [pc, #544]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4b84      	ldr	r3, [pc, #528]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05b      	beq.n	8003e24 <HAL_RCC_OscConfig+0x124>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d157      	bne.n	8003e24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e25a      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x90>
 8003d82:	4b7c      	ldr	r3, [pc, #496]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7b      	ldr	r2, [pc, #492]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCC_OscConfig+0xcc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0xb4>
 8003d9a:	4b76      	ldr	r3, [pc, #472]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a75      	ldr	r2, [pc, #468]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0xcc>
 8003db4:	4b6f      	ldr	r3, [pc, #444]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6e      	ldr	r2, [pc, #440]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b6c      	ldr	r3, [pc, #432]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6b      	ldr	r2, [pc, #428]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd ffe6 	bl	8001da4 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fd ffe2 	bl	8001da4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e21f      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0xdc>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd ffd2 	bl	8001da4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd ffce 	bl	8001da4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e20b      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	4b57      	ldr	r3, [pc, #348]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x104>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d06f      	beq.n	8003f12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e32:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e3e:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d105      	bne.n	8003e56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d11c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e62:	4b44      	ldr	r3, [pc, #272]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d116      	bne.n	8003e9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x186>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e1d3      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4937      	ldr	r1, [pc, #220]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	e03a      	b.n	8003f12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea4:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_OscConfig+0x278>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fd ff7b 	bl	8001da4 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb2:	f7fd ff77 	bl	8001da4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e1b4      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4925      	ldr	r1, [pc, #148]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]
 8003ee4:	e015      	b.n	8003f12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x278>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd ff5a 	bl	8001da4 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fd ff56 	bl	8001da4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e193      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d036      	beq.n	8003f8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d016      	beq.n	8003f54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_RCC_OscConfig+0x27c>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd ff3a 	bl	8001da4 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f34:	f7fd ff36 	bl	8001da4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e173      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x234>
 8003f52:	e01b      	b.n	8003f8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_OscConfig+0x27c>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd ff23 	bl	8001da4 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	e00e      	b.n	8003f80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fd ff1f 	bl	8001da4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d907      	bls.n	8003f80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e15c      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
 8003f74:	40023800 	.word	0x40023800
 8003f78:	42470000 	.word	0x42470000
 8003f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	4b8a      	ldr	r3, [pc, #552]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8003f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ea      	bne.n	8003f62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8097 	beq.w	80040c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9e:	4b83      	ldr	r3, [pc, #524]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	4b7f      	ldr	r3, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a7e      	ldr	r2, [pc, #504]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b79      	ldr	r3, [pc, #484]	; (80041b0 <HAL_RCC_OscConfig+0x4b0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b76      	ldr	r3, [pc, #472]	; (80041b0 <HAL_RCC_OscConfig+0x4b0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a75      	ldr	r2, [pc, #468]	; (80041b0 <HAL_RCC_OscConfig+0x4b0>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fd fedf 	bl	8001da4 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fea:	f7fd fedb 	bl	8001da4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e118      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	4b6c      	ldr	r3, [pc, #432]	; (80041b0 <HAL_RCC_OscConfig+0x4b0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x31e>
 8004010:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e01c      	b.n	8004058 <HAL_RCC_OscConfig+0x358>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b05      	cmp	r3, #5
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x340>
 8004026:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a60      	ldr	r2, [pc, #384]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6713      	str	r3, [r2, #112]	; 0x70
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0x358>
 8004040:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a59      	ldr	r2, [pc, #356]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
 800404c:	4b57      	ldr	r3, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	4a56      	ldr	r2, [pc, #344]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd fea0 	bl	8001da4 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fd fe9c 	bl	8001da4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0d7      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ee      	beq.n	8004068 <HAL_RCC_OscConfig+0x368>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fe8a 	bl	8001da4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fd fe86 	bl	8001da4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0c1      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040aa:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ee      	bne.n	8004094 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	4a3a      	ldr	r2, [pc, #232]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80ad 	beq.w	800422c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d060      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d145      	bne.n	8004172 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <HAL_RCC_OscConfig+0x4b4>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fe5a 	bl	8001da4 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd fe56 	bl	8001da4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e093      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	3b01      	subs	r3, #1
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	071b      	lsls	r3, r3, #28
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4b4>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fd fe2b 	bl	8001da4 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd fe27 	bl	8001da4 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e064      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x452>
 8004170:	e05c      	b.n	800422c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x4b4>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd fe14 	bl	8001da4 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fe10 	bl	8001da4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04d      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x4ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x480>
 800419e:	e045      	b.n	800422c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e040      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b8:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <HAL_RCC_OscConfig+0x538>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d030      	beq.n	8004228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d129      	bne.n	8004228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d122      	bne.n	8004228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e8:	4013      	ands	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d119      	bne.n	8004228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d10f      	bne.n	8004228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d904      	bls.n	800425e <HAL_SAI_InitProtocol+0x22>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3b03      	subs	r3, #3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d812      	bhi.n	8004282 <HAL_SAI_InitProtocol+0x46>
 800425c:	e008      	b.n	8004270 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f9dd 	bl	8004624 <SAI_InitI2S>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	e00b      	b.n	8004288 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fa82 	bl	8004780 <SAI_InitPCM>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e002      	b.n	8004288 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
      break;
 8004286:	bf00      	nop
  }

  if (status == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f808 	bl	80042a4 <HAL_SAI_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004298:	7dfb      	ldrb	r3, [r7, #23]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e10c      	b.n	80044e0 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd fbba 	bl	8001a54 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 faff 	bl	80048ec <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fba6 	bl	8004a40 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d030      	beq.n	800435e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fbe3 	bl	8004ac8 <SAI_GetInputClock>
 8004302:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	025b      	lsls	r3, r3, #9
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a72      	ldr	r2, [pc, #456]	; (80044e8 <HAL_SAI_Init+0x244>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	4b6e      	ldr	r3, [pc, #440]	; (80044e8 <HAL_SAI_Init+0x244>)
 800432e:	fba3 2301 	umull	r2, r3, r3, r1
 8004332:	08da      	lsrs	r2, r3, #3
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	1aca      	subs	r2, r1, r3
 800433e:	2a08      	cmp	r2, #8
 8004340:	d904      	bls.n	800434c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	2b04      	cmp	r3, #4
 8004352:	d104      	bne.n	800435e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	085a      	lsrs	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_SAI_Init+0xca>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d109      	bne.n	8004382 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_SAI_Init+0xd6>
 8004376:	2300      	movs	r3, #0
 8004378:	e001      	b.n	800437e <HAL_SAI_Init+0xda>
 800437a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e008      	b.n	8004394 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b01      	cmp	r3, #1
 8004388:	d102      	bne.n	8004390 <HAL_SAI_Init+0xec>
 800438a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800438e:	e000      	b.n	8004392 <HAL_SAI_Init+0xee>
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d811      	bhi.n	80043c0 <HAL_SAI_Init+0x11c>
 800439c:	2b02      	cmp	r3, #2
 800439e:	d20b      	bcs.n	80043b8 <HAL_SAI_Init+0x114>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SAI_Init+0x106>
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d003      	beq.n	80043b0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80043a8:	e00a      	b.n	80043c0 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
    break;
 80043ae:	e008      	b.n	80043c2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80043b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b4:	613b      	str	r3, [r7, #16]
    break;
 80043b6:	e004      	b.n	80043c2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80043b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043bc:	613b      	str	r3, [r7, #16]
    break;
 80043be:	e000      	b.n	80043c2 <HAL_SAI_Init+0x11e>
      break;
 80043c0:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6819      	ldr	r1, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b47      	ldr	r3, [pc, #284]	; (80044ec <HAL_SAI_Init+0x248>)
 80043ce:	400b      	ands	r3, r1
 80043d0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6819      	ldr	r1, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	431a      	orrs	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80043fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004406:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	051b      	lsls	r3, r3, #20
 800440e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004426:	f023 030f 	bic.w	r3, r3, #15
 800442a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6899      	ldr	r1, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_SAI_Init+0x24c>)
 8004456:	400b      	ands	r3, r1
 8004458:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800446a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8004470:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8004476:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447c:	3b01      	subs	r3, #1
 800447e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004480:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68d9      	ldr	r1, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004498:	400b      	ands	r3, r1
 800449a:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80044b2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	3b01      	subs	r3, #1
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	cccccccd 	.word	0xcccccccd
 80044ec:	ff05c010 	.word	0xff05c010
 80044f0:	fff88000 	.word	0xfff88000

080044f4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_SAI_Receive_DMA+0x1a>
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e074      	b.n	80045fc <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d16d      	bne.n	80045fa <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_SAI_Receive_DMA+0x38>
 8004528:	2302      	movs	r3, #2
 800452a:	e067      	b.n	80045fc <HAL_SAI_Receive_DMA+0x108>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2222      	movs	r2, #34	; 0x22
 8004556:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_SAI_Receive_DMA+0x110>)
 8004560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004566:	4a28      	ldr	r2, [pc, #160]	; (8004608 <HAL_SAI_Receive_DMA+0x114>)
 8004568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	4a27      	ldr	r2, [pc, #156]	; (800460c <HAL_SAI_Receive_DMA+0x118>)
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	2200      	movs	r2, #0
 8004578:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	331c      	adds	r3, #28
 8004584:	4619      	mov	r1, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004592:	f7fd fdf7 	bl	8002184 <HAL_DMA_Start_IT>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e029      	b.n	80045fc <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80045a8:	2100      	movs	r1, #0
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f968 	bl	8004880 <SAI_InterruptFlag>
 80045b0:	4601      	mov	r1, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045ce:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045ec:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	080049bd 	.word	0x080049bd
 8004608:	0800495d 	.word	0x0800495d
 800460c:	080049d9 	.word	0x080049d9

08004610 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <SAI_InitI2S+0x2a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d103      	bne.n	8004656 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
 8004654:	e002      	b.n	800465c <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004662:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800466a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e076      	b.n	8004774 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
 800469a:	e006      	b.n	80046aa <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d84f      	bhi.n	8004750 <SAI_InitI2S+0x12c>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <SAI_InitI2S+0x94>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	0800472f 	.word	0x0800472f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	011a      	lsls	r2, r3, #4
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2240      	movs	r2, #64	; 0x40
 80046e6:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80046e8:	e034      	b.n	8004754 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	019a      	lsls	r2, r3, #6
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800470a:	e023      	b.n	8004754 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	22c0      	movs	r2, #192	; 0xc0
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	019a      	lsls	r2, r3, #6
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800472c:	e012      	b.n	8004754 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22e0      	movs	r2, #224	; 0xe0
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	019a      	lsls	r2, r3, #6
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800474e:	e001      	b.n	8004754 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e00f      	b.n	8004774 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d10b      	bne.n	8004772 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d102      	bne.n	8004766 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2210      	movs	r2, #16
 8004764:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d102      	bne.n	8004772 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2208      	movs	r2, #8
 8004770:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <SAI_InitPCM+0x2a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d103      	bne.n	80047b2 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
 80047b0:	e002      	b.n	80047b8 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047c4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e0:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d103      	bne.n	80047f0 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	649a      	str	r2, [r3, #72]	; 0x48
 80047ee:	e002      	b.n	80047f6 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	220d      	movs	r2, #13
 80047f4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d837      	bhi.n	800486c <SAI_InitPCM+0xec>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <SAI_InitPCM+0x84>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004815 	.word	0x08004815
 8004808:	0800482b 	.word	0x0800482b
 800480c:	08004841 	.word	0x08004841
 8004810:	08004857 	.word	0x08004857
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2240      	movs	r2, #64	; 0x40
 8004826:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004828:	e022      	b.n	8004870 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800483e:	e017      	b.n	8004870 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	22c0      	movs	r2, #192	; 0xc0
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004854:	e00c      	b.n	8004870 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	22e0      	movs	r2, #224	; 0xe0
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800486a:	e001      	b.n	8004870 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800488a:	2301      	movs	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d103      	bne.n	800489c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f043 0308 	orr.w	r3, r3, #8
 800489a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d10b      	bne.n	80048bc <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d003      	beq.n	80048b4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d103      	bne.n	80048bc <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f043 0310 	orr.w	r3, r3, #16
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d003      	beq.n	80048cc <SAI_InterruptFlag+0x4c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d104      	bne.n	80048d6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e003      	b.n	80048de <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80048de:	68fb      	ldr	r3, [r7, #12]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <SAI_Disable+0x68>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a17      	ldr	r2, [pc, #92]	; (8004958 <SAI_Disable+0x6c>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0b1b      	lsrs	r3, r3, #12
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004916:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	60fa      	str	r2, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	72fb      	strb	r3, [r7, #11]
      break;
 8004936:	e006      	b.n	8004946 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e8      	bne.n	8004918 <SAI_Disable+0x2c>

  return status;
 8004946:	7afb      	ldrb	r3, [r7, #11]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	2000001c 	.word	0x2000001c
 8004958:	95cbec1b 	.word	0x95cbec1b

0800495c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004972:	d01c      	beq.n	80049ae <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004982:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800498c:	2100      	movs	r1, #0
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff ff76 	bl	8004880 <SAI_InterruptFlag>
 8004994:	4603      	mov	r3, r0
 8004996:	43d9      	mvns	r1, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	400a      	ands	r2, r1
 80049a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7fc fd82 	bl	80014b8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7fc fd64 	bl	8001498 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d004      	beq.n	8004a0a <SAI_DMAError+0x32>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d112      	bne.n	8004a30 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a18:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f7ff ff66 	bl	80048ec <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff fded 	bl	8004610 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d00c      	beq.n	8004a6a <SAI_BlockSynchroConfig+0x2a>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d80d      	bhi.n	8004a70 <SAI_BlockSynchroConfig+0x30>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <SAI_BlockSynchroConfig+0x1e>
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d003      	beq.n	8004a64 <SAI_BlockSynchroConfig+0x24>
 8004a5c:	e008      	b.n	8004a70 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
      break;
 8004a62:	e008      	b.n	8004a76 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a64:	2310      	movs	r3, #16
 8004a66:	60fb      	str	r3, [r7, #12]
      break;
 8004a68:	e005      	b.n	8004a76 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	60fb      	str	r3, [r7, #12]
      break;
 8004a6e:	e002      	b.n	8004a76 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
      break;
 8004a74:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d103      	bne.n	8004a86 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <SAI_BlockSynchroConfig+0x78>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <SAI_BlockSynchroConfig+0x5a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a09      	ldr	r2, [pc, #36]	; (8004abc <SAI_BlockSynchroConfig+0x7c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d103      	bne.n	8004aa2 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <SAI_BlockSynchroConfig+0x80>)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e003      	b.n	8004aaa <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004aa2:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <SAI_BlockSynchroConfig+0x84>)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40015804 	.word	0x40015804
 8004abc:	40015824 	.word	0x40015824
 8004ac0:	40015800 	.word	0x40015800
 8004ac4:	40015c00 	.word	0x40015c00

08004ac8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <SAI_GetInputClock+0x3c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <SAI_GetInputClock+0x20>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <SAI_GetInputClock+0x40>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d104      	bne.n	8004af2 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004ae8:	2004      	movs	r0, #4
 8004aea:	f7fe fc91 	bl	8003410 <HAL_RCCEx_GetPeriphCLKFreq>
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	e003      	b.n	8004afa <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004af2:	2008      	movs	r0, #8
 8004af4:	f7fe fc8c 	bl	8003410 <HAL_RCCEx_GetPeriphCLKFreq>
 8004af8:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8004afa:	68fb      	ldr	r3, [r7, #12]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40015804 	.word	0x40015804
 8004b08:	40015824 	.word	0x40015824

08004b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e07b      	b.n	8004c16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d108      	bne.n	8004b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d009      	beq.n	8004b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	61da      	str	r2, [r3, #28]
 8004b36:	e005      	b.n	8004b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc fe2a 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	ea42 0103 	orr.w	r1, r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0104 	and.w	r1, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f003 0210 	and.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_SPI_Transmit+0x22>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e126      	b.n	8004e8e <HAL_SPI_Transmit+0x270>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c48:	f7fd f8ac 	bl	8001da4 <HAL_GetTick>
 8004c4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c62:	e10b      	b.n	8004e7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Transmit+0x52>
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c74:	e102      	b.n	8004e7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	d10f      	bne.n	8004cde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d007      	beq.n	8004cfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d04:	d14b      	bne.n	8004d9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_Transmit+0xf6>
 8004d0e:	8afb      	ldrh	r3, [r7, #22]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d13e      	bne.n	8004d92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d38:	e02b      	b.n	8004d92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d112      	bne.n	8004d6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d6c:	e011      	b.n	8004d92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d6e:	f7fd f819 	bl	8001da4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d803      	bhi.n	8004d86 <HAL_SPI_Transmit+0x168>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d84:	d102      	bne.n	8004d8c <HAL_SPI_Transmit+0x16e>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d90:	e074      	b.n	8004e7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ce      	bne.n	8004d3a <HAL_SPI_Transmit+0x11c>
 8004d9c:	e04c      	b.n	8004e38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_Transmit+0x18e>
 8004da6:	8afb      	ldrh	r3, [r7, #22]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d140      	bne.n	8004e2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	7812      	ldrb	r2, [r2, #0]
 8004db8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dd2:	e02c      	b.n	8004e2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d113      	bne.n	8004e0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e08:	e011      	b.n	8004e2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0a:	f7fc ffcb 	bl	8001da4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d803      	bhi.n	8004e22 <HAL_SPI_Transmit+0x204>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e20:	d102      	bne.n	8004e28 <HAL_SPI_Transmit+0x20a>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e2c:	e026      	b.n	8004e7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1cd      	bne.n	8004dd4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fe9f 	bl	8005b80 <SPI_EndRxTxTransaction>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e000      	b.n	8004e7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af02      	add	r7, sp, #8
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb2:	d112      	bne.n	8004eda <HAL_SPI_Receive+0x44>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10e      	bne.n	8004eda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f8f1 	bl	80050b8 <HAL_SPI_TransmitReceive>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	e0ea      	b.n	80050b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_SPI_Receive+0x52>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0e3      	b.n	80050b0 <HAL_SPI_Receive+0x21a>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef0:	f7fc ff58 	bl	8001da4 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d002      	beq.n	8004f08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
 8004f04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f06:	e0ca      	b.n	800509e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Receive+0x7e>
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f18:	e0c1      	b.n	800509e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f60:	d10f      	bne.n	8004f82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d007      	beq.n	8004fa0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d162      	bne.n	800506e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fa8:	e02e      	b.n	8005008 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d115      	bne.n	8004fe4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f103 020c 	add.w	r2, r3, #12
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fe2:	e011      	b.n	8005008 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe4:	f7fc fede 	bl	8001da4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d803      	bhi.n	8004ffc <HAL_SPI_Receive+0x166>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffa:	d102      	bne.n	8005002 <HAL_SPI_Receive+0x16c>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005006:	e04a      	b.n	800509e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cb      	bne.n	8004faa <HAL_SPI_Receive+0x114>
 8005012:	e031      	b.n	8005078 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d113      	bne.n	800504a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	b292      	uxth	r2, r2
 800502e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005048:	e011      	b.n	800506e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504a:	f7fc feab 	bl	8001da4 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d803      	bhi.n	8005062 <HAL_SPI_Receive+0x1cc>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005060:	d102      	bne.n	8005068 <HAL_SPI_Receive+0x1d2>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800506c:	e017      	b.n	800509e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1cd      	bne.n	8005014 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fd19 	bl	8005ab4 <SPI_EndRxTransaction>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
 800509a:	e000      	b.n	800509e <HAL_SPI_Receive+0x208>
  }

error :
 800509c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	; 0x30
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050c6:	2301      	movs	r3, #1
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_SPI_TransmitReceive+0x26>
 80050da:	2302      	movs	r3, #2
 80050dc:	e18a      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x33c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e6:	f7fc fe5d 	bl	8001da4 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005104:	2b01      	cmp	r3, #1
 8005106:	d00f      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x70>
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d107      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x68>
 8005118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800511c:	2b04      	cmp	r3, #4
 800511e:	d003      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005126:	e15b      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_SPI_TransmitReceive+0x82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_TransmitReceive+0x82>
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005140:	e14e      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b04      	cmp	r3, #4
 800514c:	d003      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2205      	movs	r2, #5
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	887a      	ldrh	r2, [r7, #2]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	887a      	ldrh	r2, [r7, #2]
 800517e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d007      	beq.n	80051aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b2:	d178      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_TransmitReceive+0x10a>
 80051bc:	8b7b      	ldrh	r3, [r7, #26]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d166      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e6:	e053      	b.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d11b      	bne.n	800522e <HAL_SPI_TransmitReceive+0x176>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <HAL_SPI_TransmitReceive+0x176>
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d113      	bne.n	800522e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d119      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x1b8>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	b292      	uxth	r2, r2
 8005252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800526c:	2301      	movs	r3, #1
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005270:	f7fc fd98 	bl	8001da4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800527c:	429a      	cmp	r2, r3
 800527e:	d807      	bhi.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005286:	d003      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800528e:	e0a7      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1a6      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x130>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1a1      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x130>
 80052a4:	e07c      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x1fc>
 80052ae:	8b7b      	ldrh	r3, [r7, #26]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d16b      	bne.n	800538c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052da:	e057      	b.n	800538c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d11c      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x26c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x26c>
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d114      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d119      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x2ae>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d014      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005362:	2301      	movs	r3, #1
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005366:	f7fc fd1d 	bl	8001da4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005372:	429a      	cmp	r2, r3
 8005374:	d803      	bhi.n	800537e <HAL_SPI_TransmitReceive+0x2c6>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800537c:	d102      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x2cc>
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800538a:	e029      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1a2      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x224>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d19d      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fbeb 	bl	8005b80 <SPI_EndRxTxTransaction>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053bc:	e010      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	e000      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	; 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d110      	bne.n	8005438 <HAL_SPI_Receive_DMA+0x3c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800541e:	d10b      	bne.n	8005438 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2204      	movs	r2, #4
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f8ac 	bl	800558c <HAL_SPI_TransmitReceive_DMA>
 8005434:	4603      	mov	r3, r0
 8005436:	e09f      	b.n	8005578 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_SPI_Receive_DMA+0x4a>
 8005442:	2302      	movs	r3, #2
 8005444:	e098      	b.n	8005578 <HAL_SPI_Receive_DMA+0x17c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d002      	beq.n	8005460 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800545a:	2302      	movs	r3, #2
 800545c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800545e:	e086      	b.n	800556e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_Receive_DMA+0x70>
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005470:	e07d      	b.n	800556e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2204      	movs	r2, #4
 8005476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	88fa      	ldrh	r2, [r7, #6]
 800548a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d10f      	bne.n	80054d4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d8:	4a29      	ldr	r2, [pc, #164]	; (8005580 <HAL_SPI_Receive_DMA+0x184>)
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	4a28      	ldr	r2, [pc, #160]	; (8005584 <HAL_SPI_Receive_DMA+0x188>)
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <HAL_SPI_Receive_DMA+0x18c>)
 80054ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	2200      	movs	r2, #0
 80054f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	4619      	mov	r1, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800550c:	f7fc fe3a 	bl	8002184 <HAL_DMA_Start_IT>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00c      	beq.n	8005530 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f043 0210 	orr.w	r2, r3, #16
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800552e:	e01e      	b.n	800556e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d007      	beq.n	800554e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0220 	orr.w	r2, r2, #32
 800555c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	0800592d 	.word	0x0800592d
 8005584:	080057f5 	.word	0x080057f5
 8005588:	08005965 	.word	0x08005965

0800558c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_SPI_TransmitReceive_DMA+0x20>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e0e3      	b.n	8005774 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80055c2:	7dbb      	ldrb	r3, [r7, #22]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d00d      	beq.n	80055e4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ce:	d106      	bne.n	80055de <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <HAL_SPI_TransmitReceive_DMA+0x52>
 80055d8:	7dbb      	ldrb	r3, [r7, #22]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055e2:	e0c2      	b.n	800576a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80055f0:	887b      	ldrh	r3, [r7, #2]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055fa:	e0b6      	b.n	800576a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b04      	cmp	r3, #4
 8005606:	d003      	beq.n	8005610 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2205      	movs	r2, #5
 800560c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	887a      	ldrh	r2, [r7, #2]
 8005620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	887a      	ldrh	r2, [r7, #2]
 8005626:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	887a      	ldrh	r2, [r7, #2]
 8005632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	887a      	ldrh	r2, [r7, #2]
 8005638:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b04      	cmp	r3, #4
 8005650:	d108      	bne.n	8005664 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4a49      	ldr	r2, [pc, #292]	; (800577c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565e:	4a48      	ldr	r2, [pc, #288]	; (8005780 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005660:	63da      	str	r2, [r3, #60]	; 0x3c
 8005662:	e007      	b.n	8005674 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	4a46      	ldr	r2, [pc, #280]	; (8005784 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800566a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	4a45      	ldr	r2, [pc, #276]	; (8005788 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005672:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	4a44      	ldr	r2, [pc, #272]	; (800578c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005680:	2200      	movs	r2, #0
 8005682:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	4619      	mov	r1, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800569c:	f7fc fd72 	bl	8002184 <HAL_DMA_Start_IT>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00c      	beq.n	80056c0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f043 0210 	orr.w	r2, r3, #16
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80056be:	e054      	b.n	800576a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d4:	2200      	movs	r2, #0
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056dc:	2200      	movs	r2, #0
 80056de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e4:	2200      	movs	r2, #0
 80056e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	2200      	movs	r2, #0
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	4619      	mov	r1, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005706:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005708:	f7fc fd3c 	bl	8002184 <HAL_DMA_Start_IT>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f043 0210 	orr.w	r2, r3, #16
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800572a:	e01e      	b.n	800576a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d007      	beq.n	800574a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005748:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0220 	orr.w	r2, r2, #32
 8005758:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0202 	orr.w	r2, r2, #2
 8005768:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	0800592d 	.word	0x0800592d
 8005780:	080057f5 	.word	0x080057f5
 8005784:	08005949 	.word	0x08005949
 8005788:	0800589d 	.word	0x0800589d
 800578c:	08005965 	.word	0x08005965

08005790 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005802:	f7fc facf 	bl	8001da4 <HAL_GetTick>
 8005806:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	d03b      	beq.n	8005890 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0220 	bic.w	r2, r2, #32
 8005826:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10d      	bne.n	800584c <SPI_DMAReceiveCplt+0x58>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005838:	d108      	bne.n	800584c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0203 	bic.w	r2, r2, #3
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	e007      	b.n	800585c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f927 	bl	8005ab4 <SPI_EndRxTransaction>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff ffa9 	bl	80057e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800588e:	e002      	b.n	8005896 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff ff7d 	bl	8005790 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058aa:	f7fc fa7b 	bl	8001da4 <HAL_GetTick>
 80058ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058be:	d02f      	beq.n	8005920 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0220 	bic.w	r2, r2, #32
 80058ce:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	2164      	movs	r1, #100	; 0x64
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f953 	bl	8005b80 <SPI_EndRxTxTransaction>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0203 	bic.w	r2, r2, #3
 80058fa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff ff61 	bl	80057e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800591e:	e002      	b.n	8005926 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff ff3f 	bl	80057a4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ff3c 	bl	80057b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff ff38 	bl	80057cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0203 	bic.w	r2, r2, #3
 8005980:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	f043 0210 	orr.w	r2, r3, #16
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ff22 	bl	80057e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059b4:	f7fc f9f6 	bl	8001da4 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	4413      	add	r3, r2
 80059c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059c4:	f7fc f9ee 	bl	8001da4 <HAL_GetTick>
 80059c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ca:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	015b      	lsls	r3, r3, #5
 80059d0:	0d1b      	lsrs	r3, r3, #20
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059da:	e054      	b.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e2:	d050      	beq.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059e4:	f7fc f9de 	bl	8001da4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d902      	bls.n	80059fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d13d      	bne.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a12:	d111      	bne.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1c:	d004      	beq.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a26:	d107      	bne.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a40:	d10f      	bne.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e017      	b.n	8005aa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	bf0c      	ite	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2300      	movne	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d19b      	bne.n	80059dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	2000001c 	.word	0x2000001c

08005ab4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac8:	d111      	bne.n	8005aee <SPI_EndRxTransaction+0x3a>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad2:	d004      	beq.n	8005ade <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d107      	bne.n	8005aee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af6:	d12a      	bne.n	8005b4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d012      	beq.n	8005b28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff ff49 	bl	80059a4 <SPI_WaitFlagStateUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02d      	beq.n	8005b74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e026      	b.n	8005b76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2101      	movs	r1, #1
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff ff36 	bl	80059a4 <SPI_WaitFlagStateUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01a      	beq.n	8005b74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e013      	b.n	8005b76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2200      	movs	r2, #0
 8005b56:	2101      	movs	r1, #1
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff ff23 	bl	80059a4 <SPI_WaitFlagStateUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e000      	b.n	8005b76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <SPI_EndRxTxTransaction+0x7c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <SPI_EndRxTxTransaction+0x80>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	0d5b      	lsrs	r3, r3, #21
 8005b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005baa:	d112      	bne.n	8005bd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fef4 	bl	80059a4 <SPI_WaitFlagStateUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e00f      	b.n	8005bf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d0f2      	beq.n	8005bd2 <SPI_EndRxTxTransaction+0x52>
 8005bec:	e000      	b.n	8005bf0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005bee:	bf00      	nop
  }

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000001c 	.word	0x2000001c
 8005c00:	165e9f81 	.word	0x165e9f81

08005c04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e041      	b.n	8005c9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fb fe0c 	bl	8001848 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f000 fb22 	bl	800628c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_IC_Start_IT+0x1e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	e013      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x46>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_IC_Start_IT+0x2e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	e00b      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x46>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_IC_Start_IT+0x3e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	e003      	b.n	8005cea <HAL_TIM_IC_Start_IT+0x46>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <HAL_TIM_IC_Start_IT+0x58>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	e013      	b.n	8005d24 <HAL_TIM_IC_Start_IT+0x80>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d104      	bne.n	8005d0c <HAL_TIM_IC_Start_IT+0x68>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e00b      	b.n	8005d24 <HAL_TIM_IC_Start_IT+0x80>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d104      	bne.n	8005d1c <HAL_TIM_IC_Start_IT+0x78>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e003      	b.n	8005d24 <HAL_TIM_IC_Start_IT+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d2c:	7b7b      	ldrb	r3, [r7, #13]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d001      	beq.n	8005d36 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0cc      	b.n	8005ed0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_IC_Start_IT+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d44:	e013      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0xca>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_IC_Start_IT+0xb2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	e00b      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0xca>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_IC_Start_IT+0xc2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	e003      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0xca>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_IC_Start_IT+0xda>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7c:	e013      	b.n	8005da6 <HAL_TIM_IC_Start_IT+0x102>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_IC_Start_IT+0xea>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d8c:	e00b      	b.n	8005da6 <HAL_TIM_IC_Start_IT+0x102>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_IC_Start_IT+0xfa>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	e003      	b.n	8005da6 <HAL_TIM_IC_Start_IT+0x102>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	d841      	bhi.n	8005e30 <HAL_TIM_IC_Start_IT+0x18c>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_IC_Start_IT+0x110>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	08005e31 	.word	0x08005e31
 8005dbc:	08005e31 	.word	0x08005e31
 8005dc0:	08005e31 	.word	0x08005e31
 8005dc4:	08005dfb 	.word	0x08005dfb
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005e31 	.word	0x08005e31
 8005dd0:	08005e31 	.word	0x08005e31
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005e31 	.word	0x08005e31
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005e1f 	.word	0x08005e1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0202 	orr.w	r2, r2, #2
 8005df6:	60da      	str	r2, [r3, #12]
      break;
 8005df8:	e01d      	b.n	8005e36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0204 	orr.w	r2, r2, #4
 8005e08:	60da      	str	r2, [r3, #12]
      break;
 8005e0a:	e014      	b.n	8005e36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	60da      	str	r2, [r3, #12]
      break;
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0210 	orr.w	r2, r2, #16
 8005e2c:	60da      	str	r2, [r3, #12]
      break;
 8005e2e:	e002      	b.n	8005e36 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
      break;
 8005e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d148      	bne.n	8005ece <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fbeb 	bl	8006620 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <HAL_TIM_IC_Start_IT+0x234>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5c:	d01d      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <HAL_TIM_IC_Start_IT+0x238>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_TIM_IC_Start_IT+0x240>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_TIM_IC_Start_IT+0x244>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_TIM_IC_Start_IT+0x248>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d111      	bne.n	8005ebe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d010      	beq.n	8005ece <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebc:	e007      	b.n	8005ece <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40001800 	.word	0x40001800

08005ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0202 	mvn.w	r2, #2
 8005f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fa ff7b 	bl	8000e32 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f986 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f98d 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0204 	mvn.w	r2, #4
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fa ff51 	bl	8000e32 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f95c 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f963 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fa ff27 	bl	8000e32 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f932 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f939 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b10      	cmp	r3, #16
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0210 	mvn.w	r2, #16
 800601c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2208      	movs	r2, #8
 8006022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fa fefd 	bl	8000e32 <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f908 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f90f 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10e      	bne.n	8006078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0201 	mvn.w	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8e2 	bl	800623c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d10e      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d107      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fb6a 	bl	8006778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d10e      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8d4 	bl	8006278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0220 	mvn.w	r2, #32
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb34 	bl	8006764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_TIM_IC_ConfigChannel+0x1e>
 800611e:	2302      	movs	r3, #2
 8006120:	e088      	b.n	8006234 <HAL_TIM_IC_ConfigChannel+0x130>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6819      	ldr	r1, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f000 f944 	bl	80063cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 020c 	bic.w	r2, r2, #12
 8006152:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6999      	ldr	r1, [r3, #24]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	619a      	str	r2, [r3, #24]
 8006166:	e060      	b.n	800622a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b04      	cmp	r3, #4
 800616c:	d11c      	bne.n	80061a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f000 f999 	bl	80064b4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006190:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6999      	ldr	r1, [r3, #24]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	021a      	lsls	r2, r3, #8
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	619a      	str	r2, [r3, #24]
 80061a6:	e040      	b.n	800622a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d11b      	bne.n	80061e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f000 f9b6 	bl	800652e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 020c 	bic.w	r2, r2, #12
 80061d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	61da      	str	r2, [r3, #28]
 80061e4:	e021      	b.n	800622a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d11c      	bne.n	8006226 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f000 f9d3 	bl	80065a6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800620e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69d9      	ldr	r1, [r3, #28]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	021a      	lsls	r2, r3, #8
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	61da      	str	r2, [r3, #28]
 8006224:	e001      	b.n	800622a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a40      	ldr	r2, [pc, #256]	; (80063a0 <TIM_Base_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d013      	beq.n	80062cc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d00f      	beq.n	80062cc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3d      	ldr	r2, [pc, #244]	; (80063a4 <TIM_Base_SetConfig+0x118>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00b      	beq.n	80062cc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3c      	ldr	r2, [pc, #240]	; (80063a8 <TIM_Base_SetConfig+0x11c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d007      	beq.n	80062cc <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a3b      	ldr	r2, [pc, #236]	; (80063ac <TIM_Base_SetConfig+0x120>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a3a      	ldr	r2, [pc, #232]	; (80063b0 <TIM_Base_SetConfig+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d108      	bne.n	80062de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2f      	ldr	r2, [pc, #188]	; (80063a0 <TIM_Base_SetConfig+0x114>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d02b      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d027      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <TIM_Base_SetConfig+0x118>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d023      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <TIM_Base_SetConfig+0x11c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01f      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <TIM_Base_SetConfig+0x120>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01b      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <TIM_Base_SetConfig+0x124>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d017      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <TIM_Base_SetConfig+0x128>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <TIM_Base_SetConfig+0x12c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00f      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a26      	ldr	r2, [pc, #152]	; (80063bc <TIM_Base_SetConfig+0x130>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00b      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <TIM_Base_SetConfig+0x134>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <TIM_Base_SetConfig+0x138>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a23      	ldr	r2, [pc, #140]	; (80063c8 <TIM_Base_SetConfig+0x13c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d108      	bne.n	8006350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <TIM_Base_SetConfig+0x114>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_Base_SetConfig+0xf8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <TIM_Base_SetConfig+0x124>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d103      	bne.n	800638c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	615a      	str	r2, [r3, #20]
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40010400 	.word	0x40010400
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800
 80063c0:	40001800 	.word	0x40001800
 80063c4:	40001c00 	.word	0x40001c00
 80063c8:	40002000 	.word	0x40002000

080063cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <TIM_TI1_SetConfig+0xcc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01b      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d017      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a25      	ldr	r2, [pc, #148]	; (800649c <TIM_TI1_SetConfig+0xd0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <TIM_TI1_SetConfig+0xd4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <TIM_TI1_SetConfig+0xd8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00b      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <TIM_TI1_SetConfig+0xdc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a21      	ldr	r2, [pc, #132]	; (80064ac <TIM_TI1_SetConfig+0xe0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a20      	ldr	r2, [pc, #128]	; (80064b0 <TIM_TI1_SetConfig+0xe4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <TIM_TI1_SetConfig+0x6a>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <TIM_TI1_SetConfig+0x6c>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e003      	b.n	8006456 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	b2db      	uxtb	r3, r3
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f023 030a 	bic.w	r3, r3, #10
 8006470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f003 030a 	and.w	r3, r3, #10
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40001800 	.word	0x40001800

080064b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0210 	bic.w	r2, r3, #16
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	031b      	lsls	r3, r3, #12
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006506:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800652e:	b480      	push	{r7}
 8006530:	b087      	sub	sp, #28
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800656a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	b2db      	uxtb	r3, r3
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800657e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b087      	sub	sp, #28
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80065f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	621a      	str	r2, [r3, #32]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2201      	movs	r2, #1
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1a      	ldr	r2, [r3, #32]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	431a      	orrs	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
}
 800665e:	bf00      	nop
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e05a      	b.n	800673a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a21      	ldr	r2, [pc, #132]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d01d      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1d      	ldr	r2, [pc, #116]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a18      	ldr	r2, [pc, #96]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d10c      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4313      	orrs	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40010000 	.word	0x40010000
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800
 8006754:	40000c00 	.word	0x40000c00
 8006758:	40010400 	.word	0x40010400
 800675c:	40014000 	.word	0x40014000
 8006760:	40001800 	.word	0x40001800

08006764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e03f      	b.n	800681e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fb f896 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	; 0x24
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fd7b 	bl	80072cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b08a      	sub	sp, #40	; 0x28
 800682a:	af02      	add	r7, sp, #8
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b20      	cmp	r3, #32
 8006844:	d17c      	bne.n	8006940 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_UART_Transmit+0x2c>
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e075      	b.n	8006942 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_UART_Transmit+0x3e>
 8006860:	2302      	movs	r3, #2
 8006862:	e06e      	b.n	8006942 <HAL_UART_Transmit+0x11c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2221      	movs	r2, #33	; 0x21
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687a:	f7fb fa93 	bl	8001da4 <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006894:	d108      	bne.n	80068a8 <HAL_UART_Transmit+0x82>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e003      	b.n	80068b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068b8:	e02a      	b.n	8006910 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2180      	movs	r1, #128	; 0x80
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 faf9 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e036      	b.n	8006942 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	3302      	adds	r3, #2
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	e007      	b.n	8006902 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1cf      	bne.n	80068ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	2140      	movs	r1, #64	; 0x40
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fac9 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	e000      	b.n	8006942 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3720      	adds	r7, #32
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b0ba      	sub	sp, #232	; 0xe8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800698a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_UART_IRQHandler+0x66>
 800699e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fbd3 	bl	8007156 <UART_Receive_IT>
      return;
 80069b0:	e256      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80de 	beq.w	8006b78 <HAL_UART_IRQHandler+0x22c>
 80069bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80d1 	beq.w	8006b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_UART_IRQHandler+0xae>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_UART_IRQHandler+0xd2>
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0202 	orr.w	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <HAL_UART_IRQHandler+0xf6>
 8006a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f043 0204 	orr.w	r2, r3, #4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d011      	beq.n	8006a72 <HAL_UART_IRQHandler+0x126>
 8006a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d105      	bne.n	8006a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f043 0208 	orr.w	r2, r3, #8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 81ed 	beq.w	8006e56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x14e>
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fb5e 	bl	8007156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x17a>
 8006abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d04f      	beq.n	8006b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa66 	bl	8006f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d141      	bne.n	8006b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d9      	bne.n	8006ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d013      	beq.n	8006b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	4a7d      	ldr	r2, [pc, #500]	; (8006d28 <HAL_UART_IRQHandler+0x3dc>)
 8006b34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fb fbea 	bl	8002314 <HAL_DMA_Abort_IT>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	e00e      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f99a 	bl	8006e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00a      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f996 	bl	8006e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e006      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f992 	bl	8006e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b72:	e170      	b.n	8006e56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	bf00      	nop
    return;
 8006b76:	e16e      	b.n	8006e56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	f040 814a 	bne.w	8006e16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8143 	beq.w	8006e16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 813c 	beq.w	8006e16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	f040 80b4 	bne.w	8006d2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8140 	beq.w	8006e5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006be2:	429a      	cmp	r2, r3
 8006be4:	f080 8139 	bcs.w	8006e5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfa:	f000 8088 	beq.w	8006d0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d9      	bne.n	8006bfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3314      	adds	r3, #20
 8006c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e1      	bne.n	8006c4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006caa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e3      	bne.n	8006c86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cde:	f023 0310 	bic.w	r3, r3, #16
 8006ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cf0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e3      	bne.n	8006ccc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fb fa93 	bl	8002234 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8c0 	bl	8006ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d24:	e099      	b.n	8006e5a <HAL_UART_IRQHandler+0x50e>
 8006d26:	bf00      	nop
 8006d28:	0800705f 	.word	0x0800705f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 808b 	beq.w	8006e5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8086 	beq.w	8006e5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d76:	647a      	str	r2, [r7, #68]	; 0x44
 8006d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e3      	bne.n	8006d52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dae:	633a      	str	r2, [r7, #48]	; 0x30
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e3      	bne.n	8006d8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0310 	bic.w	r3, r3, #16
 8006de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006df4:	61fa      	str	r2, [r7, #28]
 8006df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	617b      	str	r3, [r7, #20]
   return(result);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e3      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f848 	bl	8006ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e14:	e023      	b.n	8006e5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_UART_IRQHandler+0x4ea>
 8006e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f929 	bl	8007086 <UART_Transmit_IT>
    return;
 8006e34:	e014      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00e      	beq.n	8006e60 <HAL_UART_IRQHandler+0x514>
 8006e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f969 	bl	8007126 <UART_EndTransmit_IT>
    return;
 8006e54:	e004      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
    return;
 8006e56:	bf00      	nop
 8006e58:	e002      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
      return;
 8006e5a:	bf00      	nop
 8006e5c:	e000      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
      return;
 8006e5e:	bf00      	nop
  }
}
 8006e60:	37e8      	adds	r7, #232	; 0xe8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop

08006e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b090      	sub	sp, #64	; 0x40
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ecc:	e050      	b.n	8006f70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed4:	d04c      	beq.n	8006f70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <UART_WaitOnFlagUntilTimeout+0x30>
 8006edc:	f7fa ff62 	bl	8001da4 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d241      	bcs.n	8006f70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f0c:	637a      	str	r2, [r7, #52]	; 0x34
 8006f0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e5      	bne.n	8006eec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3314      	adds	r3, #20
 8006f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f40:	623a      	str	r2, [r7, #32]
 8006f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	69f9      	ldr	r1, [r7, #28]
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e00f      	b.n	8006f90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d09f      	beq.n	8006ece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3740      	adds	r7, #64	; 0x40
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b095      	sub	sp, #84	; 0x54
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fc0:	643a      	str	r2, [r7, #64]	; 0x40
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e5      	bne.n	8006fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3314      	adds	r3, #20
 8006fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e5      	bne.n	8006fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	2b01      	cmp	r3, #1
 800700e:	d119      	bne.n	8007044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f023 0310 	bic.w	r3, r3, #16
 8007026:	647b      	str	r3, [r7, #68]	; 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	330c      	adds	r3, #12
 800702e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007030:	61ba      	str	r2, [r7, #24]
 8007032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6979      	ldr	r1, [r7, #20]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	613b      	str	r3, [r7, #16]
   return(result);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e5      	bne.n	8007010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007052:	bf00      	nop
 8007054:	3754      	adds	r7, #84	; 0x54
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff09 	bl	8006e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b21      	cmp	r3, #33	; 0x21
 8007098:	d13e      	bne.n	8007118 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a2:	d114      	bne.n	80070ce <UART_Transmit_IT+0x48>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d110      	bne.n	80070ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	621a      	str	r2, [r3, #32]
 80070cc:	e008      	b.n	80070e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6211      	str	r1, [r2, #32]
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4619      	mov	r1, r3
 80070ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10f      	bne.n	8007114 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e000      	b.n	800711a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007118:	2302      	movs	r3, #2
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fe8e 	bl	8006e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b08c      	sub	sp, #48	; 0x30
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b22      	cmp	r3, #34	; 0x22
 8007168:	f040 80ab 	bne.w	80072c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007174:	d117      	bne.n	80071a6 <UART_Receive_IT+0x50>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d113      	bne.n	80071a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007194:	b29a      	uxth	r2, r3
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	1c9a      	adds	r2, r3, #2
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	629a      	str	r2, [r3, #40]	; 0x28
 80071a4:	e026      	b.n	80071f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	d007      	beq.n	80071ca <UART_Receive_IT+0x74>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <UART_Receive_IT+0x82>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	e008      	b.n	80071ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4619      	mov	r1, r3
 8007202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007204:	2b00      	cmp	r3, #0
 8007206:	d15a      	bne.n	80072be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0220 	bic.w	r2, r2, #32
 8007216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0201 	bic.w	r2, r2, #1
 8007236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	2b01      	cmp	r3, #1
 8007246:	d135      	bne.n	80072b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	613b      	str	r3, [r7, #16]
   return(result);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f023 0310 	bic.w	r3, r3, #16
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	330c      	adds	r3, #12
 800726c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726e:	623a      	str	r2, [r7, #32]
 8007270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	69f9      	ldr	r1, [r7, #28]
 8007274:	6a3a      	ldr	r2, [r7, #32]
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	61bb      	str	r3, [r7, #24]
   return(result);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b10      	cmp	r3, #16
 800728e:	d10a      	bne.n	80072a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fdf9 	bl	8006ea4 <HAL_UARTEx_RxEventCallback>
 80072b2:	e002      	b.n	80072ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fde1 	bl	8006e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e002      	b.n	80072c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
  }
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3730      	adds	r7, #48	; 0x30
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d0:	b0c0      	sub	sp, #256	; 0x100
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	68d9      	ldr	r1, [r3, #12]
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	ea40 0301 	orr.w	r3, r0, r1
 80072f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	431a      	orrs	r2, r3
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	431a      	orrs	r2, r3
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007324:	f021 010c 	bic.w	r1, r1, #12
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007332:	430b      	orrs	r3, r1
 8007334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	6999      	ldr	r1, [r3, #24]
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	ea40 0301 	orr.w	r3, r0, r1
 8007352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b8f      	ldr	r3, [pc, #572]	; (8007598 <UART_SetConfig+0x2cc>)
 800735c:	429a      	cmp	r2, r3
 800735e:	d005      	beq.n	800736c <UART_SetConfig+0xa0>
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b8d      	ldr	r3, [pc, #564]	; (800759c <UART_SetConfig+0x2d0>)
 8007368:	429a      	cmp	r2, r3
 800736a:	d104      	bne.n	8007376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fb fd12 	bl	8002d94 <HAL_RCC_GetPCLK2Freq>
 8007370:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007374:	e003      	b.n	800737e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007376:	f7fb fcf9 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 800737a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007388:	f040 810c 	bne.w	80075a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800738c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007390:	2200      	movs	r2, #0
 8007392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007396:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800739a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800739e:	4622      	mov	r2, r4
 80073a0:	462b      	mov	r3, r5
 80073a2:	1891      	adds	r1, r2, r2
 80073a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80073a6:	415b      	adcs	r3, r3
 80073a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073ae:	4621      	mov	r1, r4
 80073b0:	eb12 0801 	adds.w	r8, r2, r1
 80073b4:	4629      	mov	r1, r5
 80073b6:	eb43 0901 	adc.w	r9, r3, r1
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ce:	4690      	mov	r8, r2
 80073d0:	4699      	mov	r9, r3
 80073d2:	4623      	mov	r3, r4
 80073d4:	eb18 0303 	adds.w	r3, r8, r3
 80073d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073dc:	462b      	mov	r3, r5
 80073de:	eb49 0303 	adc.w	r3, r9, r3
 80073e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073fa:	460b      	mov	r3, r1
 80073fc:	18db      	adds	r3, r3, r3
 80073fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007400:	4613      	mov	r3, r2
 8007402:	eb42 0303 	adc.w	r3, r2, r3
 8007406:	657b      	str	r3, [r7, #84]	; 0x54
 8007408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800740c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007410:	f7f9 f808 	bl	8000424 <__aeabi_uldivmod>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4b61      	ldr	r3, [pc, #388]	; (80075a0 <UART_SetConfig+0x2d4>)
 800741a:	fba3 2302 	umull	r2, r3, r3, r2
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	011c      	lsls	r4, r3, #4
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800742c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	1891      	adds	r1, r2, r2
 800743a:	64b9      	str	r1, [r7, #72]	; 0x48
 800743c:	415b      	adcs	r3, r3
 800743e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007444:	4641      	mov	r1, r8
 8007446:	eb12 0a01 	adds.w	sl, r2, r1
 800744a:	4649      	mov	r1, r9
 800744c:	eb43 0b01 	adc.w	fp, r3, r1
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800745c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007464:	4692      	mov	sl, r2
 8007466:	469b      	mov	fp, r3
 8007468:	4643      	mov	r3, r8
 800746a:	eb1a 0303 	adds.w	r3, sl, r3
 800746e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007472:	464b      	mov	r3, r9
 8007474:	eb4b 0303 	adc.w	r3, fp, r3
 8007478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007488:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800748c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007490:	460b      	mov	r3, r1
 8007492:	18db      	adds	r3, r3, r3
 8007494:	643b      	str	r3, [r7, #64]	; 0x40
 8007496:	4613      	mov	r3, r2
 8007498:	eb42 0303 	adc.w	r3, r2, r3
 800749c:	647b      	str	r3, [r7, #68]	; 0x44
 800749e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074a6:	f7f8 ffbd 	bl	8000424 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	4b3b      	ldr	r3, [pc, #236]	; (80075a0 <UART_SetConfig+0x2d4>)
 80074b2:	fba3 2301 	umull	r2, r3, r3, r1
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	2264      	movs	r2, #100	; 0x64
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	1acb      	subs	r3, r1, r3
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074c6:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <UART_SetConfig+0x2d4>)
 80074c8:	fba3 2302 	umull	r2, r3, r3, r2
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074d4:	441c      	add	r4, r3
 80074d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80074f0:	415b      	adcs	r3, r3
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074f8:	4641      	mov	r1, r8
 80074fa:	1851      	adds	r1, r2, r1
 80074fc:	6339      	str	r1, [r7, #48]	; 0x30
 80074fe:	4649      	mov	r1, r9
 8007500:	414b      	adcs	r3, r1
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007510:	4659      	mov	r1, fp
 8007512:	00cb      	lsls	r3, r1, #3
 8007514:	4651      	mov	r1, sl
 8007516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751a:	4651      	mov	r1, sl
 800751c:	00ca      	lsls	r2, r1, #3
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	4603      	mov	r3, r0
 8007524:	4642      	mov	r2, r8
 8007526:	189b      	adds	r3, r3, r2
 8007528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800752c:	464b      	mov	r3, r9
 800752e:	460a      	mov	r2, r1
 8007530:	eb42 0303 	adc.w	r3, r2, r3
 8007534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007544:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800754c:	460b      	mov	r3, r1
 800754e:	18db      	adds	r3, r3, r3
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
 8007552:	4613      	mov	r3, r2
 8007554:	eb42 0303 	adc.w	r3, r2, r3
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800755e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007562:	f7f8 ff5f 	bl	8000424 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <UART_SetConfig+0x2d4>)
 800756c:	fba3 1302 	umull	r1, r3, r3, r2
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	2164      	movs	r1, #100	; 0x64
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	3332      	adds	r3, #50	; 0x32
 800757e:	4a08      	ldr	r2, [pc, #32]	; (80075a0 <UART_SetConfig+0x2d4>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	f003 0207 	and.w	r2, r3, #7
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4422      	add	r2, r4
 8007592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007594:	e105      	b.n	80077a2 <UART_SetConfig+0x4d6>
 8007596:	bf00      	nop
 8007598:	40011000 	.word	0x40011000
 800759c:	40011400 	.word	0x40011400
 80075a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075b6:	4642      	mov	r2, r8
 80075b8:	464b      	mov	r3, r9
 80075ba:	1891      	adds	r1, r2, r2
 80075bc:	6239      	str	r1, [r7, #32]
 80075be:	415b      	adcs	r3, r3
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
 80075c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075c6:	4641      	mov	r1, r8
 80075c8:	1854      	adds	r4, r2, r1
 80075ca:	4649      	mov	r1, r9
 80075cc:	eb43 0501 	adc.w	r5, r3, r1
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	00eb      	lsls	r3, r5, #3
 80075da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075de:	00e2      	lsls	r2, r4, #3
 80075e0:	4614      	mov	r4, r2
 80075e2:	461d      	mov	r5, r3
 80075e4:	4643      	mov	r3, r8
 80075e6:	18e3      	adds	r3, r4, r3
 80075e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075ec:	464b      	mov	r3, r9
 80075ee:	eb45 0303 	adc.w	r3, r5, r3
 80075f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007602:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007612:	4629      	mov	r1, r5
 8007614:	008b      	lsls	r3, r1, #2
 8007616:	4621      	mov	r1, r4
 8007618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800761c:	4621      	mov	r1, r4
 800761e:	008a      	lsls	r2, r1, #2
 8007620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007624:	f7f8 fefe 	bl	8000424 <__aeabi_uldivmod>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4b60      	ldr	r3, [pc, #384]	; (80077b0 <UART_SetConfig+0x4e4>)
 800762e:	fba3 2302 	umull	r2, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	011c      	lsls	r4, r3, #4
 8007636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763a:	2200      	movs	r2, #0
 800763c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007640:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	1891      	adds	r1, r2, r2
 800764e:	61b9      	str	r1, [r7, #24]
 8007650:	415b      	adcs	r3, r3
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007658:	4641      	mov	r1, r8
 800765a:	1851      	adds	r1, r2, r1
 800765c:	6139      	str	r1, [r7, #16]
 800765e:	4649      	mov	r1, r9
 8007660:	414b      	adcs	r3, r1
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007670:	4659      	mov	r1, fp
 8007672:	00cb      	lsls	r3, r1, #3
 8007674:	4651      	mov	r1, sl
 8007676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767a:	4651      	mov	r1, sl
 800767c:	00ca      	lsls	r2, r1, #3
 800767e:	4610      	mov	r0, r2
 8007680:	4619      	mov	r1, r3
 8007682:	4603      	mov	r3, r0
 8007684:	4642      	mov	r2, r8
 8007686:	189b      	adds	r3, r3, r2
 8007688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800768c:	464b      	mov	r3, r9
 800768e:	460a      	mov	r2, r1
 8007690:	eb42 0303 	adc.w	r3, r2, r3
 8007694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076b0:	4649      	mov	r1, r9
 80076b2:	008b      	lsls	r3, r1, #2
 80076b4:	4641      	mov	r1, r8
 80076b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ba:	4641      	mov	r1, r8
 80076bc:	008a      	lsls	r2, r1, #2
 80076be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076c2:	f7f8 feaf 	bl	8000424 <__aeabi_uldivmod>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4b39      	ldr	r3, [pc, #228]	; (80077b0 <UART_SetConfig+0x4e4>)
 80076cc:	fba3 1302 	umull	r1, r3, r3, r2
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	2164      	movs	r1, #100	; 0x64
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	3332      	adds	r3, #50	; 0x32
 80076de:	4a34      	ldr	r2, [pc, #208]	; (80077b0 <UART_SetConfig+0x4e4>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ea:	441c      	add	r4, r3
 80076ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f0:	2200      	movs	r2, #0
 80076f2:	673b      	str	r3, [r7, #112]	; 0x70
 80076f4:	677a      	str	r2, [r7, #116]	; 0x74
 80076f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076fa:	4642      	mov	r2, r8
 80076fc:	464b      	mov	r3, r9
 80076fe:	1891      	adds	r1, r2, r2
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	415b      	adcs	r3, r3
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800770a:	4641      	mov	r1, r8
 800770c:	1851      	adds	r1, r2, r1
 800770e:	6039      	str	r1, [r7, #0]
 8007710:	4649      	mov	r1, r9
 8007712:	414b      	adcs	r3, r1
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007722:	4659      	mov	r1, fp
 8007724:	00cb      	lsls	r3, r1, #3
 8007726:	4651      	mov	r1, sl
 8007728:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772c:	4651      	mov	r1, sl
 800772e:	00ca      	lsls	r2, r1, #3
 8007730:	4610      	mov	r0, r2
 8007732:	4619      	mov	r1, r3
 8007734:	4603      	mov	r3, r0
 8007736:	4642      	mov	r2, r8
 8007738:	189b      	adds	r3, r3, r2
 800773a:	66bb      	str	r3, [r7, #104]	; 0x68
 800773c:	464b      	mov	r3, r9
 800773e:	460a      	mov	r2, r1
 8007740:	eb42 0303 	adc.w	r3, r2, r3
 8007744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	663b      	str	r3, [r7, #96]	; 0x60
 8007750:	667a      	str	r2, [r7, #100]	; 0x64
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800775e:	4649      	mov	r1, r9
 8007760:	008b      	lsls	r3, r1, #2
 8007762:	4641      	mov	r1, r8
 8007764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007768:	4641      	mov	r1, r8
 800776a:	008a      	lsls	r2, r1, #2
 800776c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007770:	f7f8 fe58 	bl	8000424 <__aeabi_uldivmod>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <UART_SetConfig+0x4e4>)
 800777a:	fba3 1302 	umull	r1, r3, r3, r2
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	2164      	movs	r1, #100	; 0x64
 8007782:	fb01 f303 	mul.w	r3, r1, r3
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	3332      	adds	r3, #50	; 0x32
 800778c:	4a08      	ldr	r2, [pc, #32]	; (80077b0 <UART_SetConfig+0x4e4>)
 800778e:	fba2 2303 	umull	r2, r3, r2, r3
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4422      	add	r2, r4
 80077a0:	609a      	str	r2, [r3, #8]
}
 80077a2:	bf00      	nop
 80077a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077a8:	46bd      	mov	sp, r7
 80077aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ae:	bf00      	nop
 80077b0:	51eb851f 	.word	0x51eb851f

080077b4 <__libc_init_array>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4d0d      	ldr	r5, [pc, #52]	; (80077ec <__libc_init_array+0x38>)
 80077b8:	4c0d      	ldr	r4, [pc, #52]	; (80077f0 <__libc_init_array+0x3c>)
 80077ba:	1b64      	subs	r4, r4, r5
 80077bc:	10a4      	asrs	r4, r4, #2
 80077be:	2600      	movs	r6, #0
 80077c0:	42a6      	cmp	r6, r4
 80077c2:	d109      	bne.n	80077d8 <__libc_init_array+0x24>
 80077c4:	4d0b      	ldr	r5, [pc, #44]	; (80077f4 <__libc_init_array+0x40>)
 80077c6:	4c0c      	ldr	r4, [pc, #48]	; (80077f8 <__libc_init_array+0x44>)
 80077c8:	f000 f820 	bl	800780c <_init>
 80077cc:	1b64      	subs	r4, r4, r5
 80077ce:	10a4      	asrs	r4, r4, #2
 80077d0:	2600      	movs	r6, #0
 80077d2:	42a6      	cmp	r6, r4
 80077d4:	d105      	bne.n	80077e2 <__libc_init_array+0x2e>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077dc:	4798      	blx	r3
 80077de:	3601      	adds	r6, #1
 80077e0:	e7ee      	b.n	80077c0 <__libc_init_array+0xc>
 80077e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e6:	4798      	blx	r3
 80077e8:	3601      	adds	r6, #1
 80077ea:	e7f2      	b.n	80077d2 <__libc_init_array+0x1e>
 80077ec:	0800784c 	.word	0x0800784c
 80077f0:	0800784c 	.word	0x0800784c
 80077f4:	0800784c 	.word	0x0800784c
 80077f8:	08007850 	.word	0x08007850

080077fc <memset>:
 80077fc:	4402      	add	r2, r0
 80077fe:	4603      	mov	r3, r0
 8007800:	4293      	cmp	r3, r2
 8007802:	d100      	bne.n	8007806 <memset+0xa>
 8007804:	4770      	bx	lr
 8007806:	f803 1b01 	strb.w	r1, [r3], #1
 800780a:	e7f9      	b.n	8007800 <memset+0x4>

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
